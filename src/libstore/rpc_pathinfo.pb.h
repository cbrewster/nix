// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc_pathinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_5fpathinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_5fpathinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pathinfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_5fpathinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_5fpathinfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_5fpathinfo_2eproto;
namespace tvix {
namespace store {
namespace v1 {
class CalculateNARResponse;
struct CalculateNARResponseDefaultTypeInternal;
extern CalculateNARResponseDefaultTypeInternal _CalculateNARResponse_default_instance_;
class GetPathInfoRequest;
struct GetPathInfoRequestDefaultTypeInternal;
extern GetPathInfoRequestDefaultTypeInternal _GetPathInfoRequest_default_instance_;
class ListPathInfoRequest;
struct ListPathInfoRequestDefaultTypeInternal;
extern ListPathInfoRequestDefaultTypeInternal _ListPathInfoRequest_default_instance_;
}  // namespace v1
}  // namespace store
}  // namespace tvix
PROTOBUF_NAMESPACE_OPEN
template<> ::tvix::store::v1::CalculateNARResponse* Arena::CreateMaybeMessage<::tvix::store::v1::CalculateNARResponse>(Arena*);
template<> ::tvix::store::v1::GetPathInfoRequest* Arena::CreateMaybeMessage<::tvix::store::v1::GetPathInfoRequest>(Arena*);
template<> ::tvix::store::v1::ListPathInfoRequest* Arena::CreateMaybeMessage<::tvix::store::v1::ListPathInfoRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tvix {
namespace store {
namespace v1 {

// ===================================================================

class GetPathInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tvix.store.v1.GetPathInfoRequest) */ {
 public:
  inline GetPathInfoRequest() : GetPathInfoRequest(nullptr) {}
  ~GetPathInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPathInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPathInfoRequest(const GetPathInfoRequest& from);
  GetPathInfoRequest(GetPathInfoRequest&& from) noexcept
    : GetPathInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetPathInfoRequest& operator=(const GetPathInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPathInfoRequest& operator=(GetPathInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPathInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ByWhatCase {
    kByOutputHash = 1,
    BY_WHAT_NOT_SET = 0,
  };

  static inline const GetPathInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetPathInfoRequest*>(
               &_GetPathInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetPathInfoRequest& a, GetPathInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPathInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPathInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPathInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPathInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPathInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPathInfoRequest& from) {
    GetPathInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPathInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tvix.store.v1.GetPathInfoRequest";
  }
  protected:
  explicit GetPathInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kByOutputHashFieldNumber = 1,
  };
  // bytes by_output_hash = 1;
  bool has_by_output_hash() const;
  private:
  bool _internal_has_by_output_hash() const;
  public:
  void clear_by_output_hash();
  const std::string& by_output_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_by_output_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_by_output_hash();
  PROTOBUF_NODISCARD std::string* release_by_output_hash();
  void set_allocated_by_output_hash(std::string* by_output_hash);
  private:
  const std::string& _internal_by_output_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_by_output_hash(const std::string& value);
  std::string* _internal_mutable_by_output_hash();
  public:

  void clear_by_what();
  ByWhatCase by_what_case() const;
  // @@protoc_insertion_point(class_scope:tvix.store.v1.GetPathInfoRequest)
 private:
  class _Internal;
  void set_has_by_output_hash();

  inline bool has_by_what() const;
  inline void clear_has_by_what();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ByWhatUnion {
      constexpr ByWhatUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr by_output_hash_;
    } by_what_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_5fpathinfo_2eproto;
};
// -------------------------------------------------------------------

class ListPathInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tvix.store.v1.ListPathInfoRequest) */ {
 public:
  inline ListPathInfoRequest() : ListPathInfoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ListPathInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPathInfoRequest(const ListPathInfoRequest& from);
  ListPathInfoRequest(ListPathInfoRequest&& from) noexcept
    : ListPathInfoRequest() {
    *this = ::std::move(from);
  }

  inline ListPathInfoRequest& operator=(const ListPathInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPathInfoRequest& operator=(ListPathInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPathInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPathInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ListPathInfoRequest*>(
               &_ListPathInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListPathInfoRequest& a, ListPathInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPathInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPathInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPathInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPathInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListPathInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListPathInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tvix.store.v1.ListPathInfoRequest";
  }
  protected:
  explicit ListPathInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tvix.store.v1.ListPathInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_rpc_5fpathinfo_2eproto;
};
// -------------------------------------------------------------------

class CalculateNARResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tvix.store.v1.CalculateNARResponse) */ {
 public:
  inline CalculateNARResponse() : CalculateNARResponse(nullptr) {}
  ~CalculateNARResponse() override;
  explicit PROTOBUF_CONSTEXPR CalculateNARResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateNARResponse(const CalculateNARResponse& from);
  CalculateNARResponse(CalculateNARResponse&& from) noexcept
    : CalculateNARResponse() {
    *this = ::std::move(from);
  }

  inline CalculateNARResponse& operator=(const CalculateNARResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateNARResponse& operator=(CalculateNARResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateNARResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateNARResponse* internal_default_instance() {
    return reinterpret_cast<const CalculateNARResponse*>(
               &_CalculateNARResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CalculateNARResponse& a, CalculateNARResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateNARResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateNARResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateNARResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateNARResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateNARResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateNARResponse& from) {
    CalculateNARResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateNARResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tvix.store.v1.CalculateNARResponse";
  }
  protected:
  explicit CalculateNARResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNarSha256FieldNumber = 2,
    kNarSizeFieldNumber = 1,
  };
  // bytes nar_sha256 = 2;
  void clear_nar_sha256();
  const std::string& nar_sha256() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nar_sha256(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nar_sha256();
  PROTOBUF_NODISCARD std::string* release_nar_sha256();
  void set_allocated_nar_sha256(std::string* nar_sha256);
  private:
  const std::string& _internal_nar_sha256() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nar_sha256(const std::string& value);
  std::string* _internal_mutable_nar_sha256();
  public:

  // uint64 nar_size = 1;
  void clear_nar_size();
  uint64_t nar_size() const;
  void set_nar_size(uint64_t value);
  private:
  uint64_t _internal_nar_size() const;
  void _internal_set_nar_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tvix.store.v1.CalculateNARResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nar_sha256_;
    uint64_t nar_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_5fpathinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetPathInfoRequest

// bytes by_output_hash = 1;
inline bool GetPathInfoRequest::_internal_has_by_output_hash() const {
  return by_what_case() == kByOutputHash;
}
inline bool GetPathInfoRequest::has_by_output_hash() const {
  return _internal_has_by_output_hash();
}
inline void GetPathInfoRequest::set_has_by_output_hash() {
  _impl_._oneof_case_[0] = kByOutputHash;
}
inline void GetPathInfoRequest::clear_by_output_hash() {
  if (_internal_has_by_output_hash()) {
    _impl_.by_what_.by_output_hash_.Destroy();
    clear_has_by_what();
  }
}
inline const std::string& GetPathInfoRequest::by_output_hash() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.GetPathInfoRequest.by_output_hash)
  return _internal_by_output_hash();
}
template <typename ArgT0, typename... ArgT>
inline void GetPathInfoRequest::set_by_output_hash(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_by_output_hash()) {
    clear_by_what();
    set_has_by_output_hash();
    _impl_.by_what_.by_output_hash_.InitDefault();
  }
  _impl_.by_what_.by_output_hash_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tvix.store.v1.GetPathInfoRequest.by_output_hash)
}
inline std::string* GetPathInfoRequest::mutable_by_output_hash() {
  std::string* _s = _internal_mutable_by_output_hash();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.GetPathInfoRequest.by_output_hash)
  return _s;
}
inline const std::string& GetPathInfoRequest::_internal_by_output_hash() const {
  if (_internal_has_by_output_hash()) {
    return _impl_.by_what_.by_output_hash_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetPathInfoRequest::_internal_set_by_output_hash(const std::string& value) {
  if (!_internal_has_by_output_hash()) {
    clear_by_what();
    set_has_by_output_hash();
    _impl_.by_what_.by_output_hash_.InitDefault();
  }
  _impl_.by_what_.by_output_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPathInfoRequest::_internal_mutable_by_output_hash() {
  if (!_internal_has_by_output_hash()) {
    clear_by_what();
    set_has_by_output_hash();
    _impl_.by_what_.by_output_hash_.InitDefault();
  }
  return _impl_.by_what_.by_output_hash_.Mutable(      GetArenaForAllocation());
}
inline std::string* GetPathInfoRequest::release_by_output_hash() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.GetPathInfoRequest.by_output_hash)
  if (_internal_has_by_output_hash()) {
    clear_has_by_what();
    return _impl_.by_what_.by_output_hash_.Release();
  } else {
    return nullptr;
  }
}
inline void GetPathInfoRequest::set_allocated_by_output_hash(std::string* by_output_hash) {
  if (has_by_what()) {
    clear_by_what();
  }
  if (by_output_hash != nullptr) {
    set_has_by_output_hash();
    _impl_.by_what_.by_output_hash_.InitAllocated(by_output_hash, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.GetPathInfoRequest.by_output_hash)
}

inline bool GetPathInfoRequest::has_by_what() const {
  return by_what_case() != BY_WHAT_NOT_SET;
}
inline void GetPathInfoRequest::clear_has_by_what() {
  _impl_._oneof_case_[0] = BY_WHAT_NOT_SET;
}
inline GetPathInfoRequest::ByWhatCase GetPathInfoRequest::by_what_case() const {
  return GetPathInfoRequest::ByWhatCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListPathInfoRequest

// -------------------------------------------------------------------

// CalculateNARResponse

// uint64 nar_size = 1;
inline void CalculateNARResponse::clear_nar_size() {
  _impl_.nar_size_ = uint64_t{0u};
}
inline uint64_t CalculateNARResponse::_internal_nar_size() const {
  return _impl_.nar_size_;
}
inline uint64_t CalculateNARResponse::nar_size() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.CalculateNARResponse.nar_size)
  return _internal_nar_size();
}
inline void CalculateNARResponse::_internal_set_nar_size(uint64_t value) {
  
  _impl_.nar_size_ = value;
}
inline void CalculateNARResponse::set_nar_size(uint64_t value) {
  _internal_set_nar_size(value);
  // @@protoc_insertion_point(field_set:tvix.store.v1.CalculateNARResponse.nar_size)
}

// bytes nar_sha256 = 2;
inline void CalculateNARResponse::clear_nar_sha256() {
  _impl_.nar_sha256_.ClearToEmpty();
}
inline const std::string& CalculateNARResponse::nar_sha256() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.CalculateNARResponse.nar_sha256)
  return _internal_nar_sha256();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CalculateNARResponse::set_nar_sha256(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nar_sha256_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tvix.store.v1.CalculateNARResponse.nar_sha256)
}
inline std::string* CalculateNARResponse::mutable_nar_sha256() {
  std::string* _s = _internal_mutable_nar_sha256();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.CalculateNARResponse.nar_sha256)
  return _s;
}
inline const std::string& CalculateNARResponse::_internal_nar_sha256() const {
  return _impl_.nar_sha256_.Get();
}
inline void CalculateNARResponse::_internal_set_nar_sha256(const std::string& value) {
  
  _impl_.nar_sha256_.Set(value, GetArenaForAllocation());
}
inline std::string* CalculateNARResponse::_internal_mutable_nar_sha256() {
  
  return _impl_.nar_sha256_.Mutable(GetArenaForAllocation());
}
inline std::string* CalculateNARResponse::release_nar_sha256() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.CalculateNARResponse.nar_sha256)
  return _impl_.nar_sha256_.Release();
}
inline void CalculateNARResponse::set_allocated_nar_sha256(std::string* nar_sha256) {
  if (nar_sha256 != nullptr) {
    
  } else {
    
  }
  _impl_.nar_sha256_.SetAllocated(nar_sha256, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nar_sha256_.IsDefault()) {
    _impl_.nar_sha256_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.CalculateNARResponse.nar_sha256)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace store
}  // namespace tvix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_5fpathinfo_2eproto

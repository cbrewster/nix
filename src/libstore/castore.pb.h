// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: castore.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_castore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_castore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_castore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_castore_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_castore_2eproto;
namespace tvix {
namespace store {
namespace v1 {
class Directory;
struct DirectoryDefaultTypeInternal;
extern DirectoryDefaultTypeInternal _Directory_default_instance_;
class DirectoryNode;
struct DirectoryNodeDefaultTypeInternal;
extern DirectoryNodeDefaultTypeInternal _DirectoryNode_default_instance_;
class FileNode;
struct FileNodeDefaultTypeInternal;
extern FileNodeDefaultTypeInternal _FileNode_default_instance_;
class SymlinkNode;
struct SymlinkNodeDefaultTypeInternal;
extern SymlinkNodeDefaultTypeInternal _SymlinkNode_default_instance_;
}  // namespace v1
}  // namespace store
}  // namespace tvix
PROTOBUF_NAMESPACE_OPEN
template<> ::tvix::store::v1::Directory* Arena::CreateMaybeMessage<::tvix::store::v1::Directory>(Arena*);
template<> ::tvix::store::v1::DirectoryNode* Arena::CreateMaybeMessage<::tvix::store::v1::DirectoryNode>(Arena*);
template<> ::tvix::store::v1::FileNode* Arena::CreateMaybeMessage<::tvix::store::v1::FileNode>(Arena*);
template<> ::tvix::store::v1::SymlinkNode* Arena::CreateMaybeMessage<::tvix::store::v1::SymlinkNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tvix {
namespace store {
namespace v1 {

// ===================================================================

class Directory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tvix.store.v1.Directory) */ {
 public:
  inline Directory() : Directory(nullptr) {}
  ~Directory() override;
  explicit PROTOBUF_CONSTEXPR Directory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Directory(const Directory& from);
  Directory(Directory&& from) noexcept
    : Directory() {
    *this = ::std::move(from);
  }

  inline Directory& operator=(const Directory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Directory& operator=(Directory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Directory& default_instance() {
    return *internal_default_instance();
  }
  static inline const Directory* internal_default_instance() {
    return reinterpret_cast<const Directory*>(
               &_Directory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Directory& a, Directory& b) {
    a.Swap(&b);
  }
  inline void Swap(Directory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Directory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Directory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Directory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Directory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Directory& from) {
    Directory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Directory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tvix.store.v1.Directory";
  }
  protected:
  explicit Directory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectoriesFieldNumber = 1,
    kFilesFieldNumber = 2,
    kSymlinksFieldNumber = 3,
  };
  // repeated .tvix.store.v1.DirectoryNode directories = 1;
  int directories_size() const;
  private:
  int _internal_directories_size() const;
  public:
  void clear_directories();
  ::tvix::store::v1::DirectoryNode* mutable_directories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::DirectoryNode >*
      mutable_directories();
  private:
  const ::tvix::store::v1::DirectoryNode& _internal_directories(int index) const;
  ::tvix::store::v1::DirectoryNode* _internal_add_directories();
  public:
  const ::tvix::store::v1::DirectoryNode& directories(int index) const;
  ::tvix::store::v1::DirectoryNode* add_directories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::DirectoryNode >&
      directories() const;

  // repeated .tvix.store.v1.FileNode files = 2;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::tvix::store::v1::FileNode* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::FileNode >*
      mutable_files();
  private:
  const ::tvix::store::v1::FileNode& _internal_files(int index) const;
  ::tvix::store::v1::FileNode* _internal_add_files();
  public:
  const ::tvix::store::v1::FileNode& files(int index) const;
  ::tvix::store::v1::FileNode* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::FileNode >&
      files() const;

  // repeated .tvix.store.v1.SymlinkNode symlinks = 3;
  int symlinks_size() const;
  private:
  int _internal_symlinks_size() const;
  public:
  void clear_symlinks();
  ::tvix::store::v1::SymlinkNode* mutable_symlinks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::SymlinkNode >*
      mutable_symlinks();
  private:
  const ::tvix::store::v1::SymlinkNode& _internal_symlinks(int index) const;
  ::tvix::store::v1::SymlinkNode* _internal_add_symlinks();
  public:
  const ::tvix::store::v1::SymlinkNode& symlinks(int index) const;
  ::tvix::store::v1::SymlinkNode* add_symlinks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::SymlinkNode >&
      symlinks() const;

  // @@protoc_insertion_point(class_scope:tvix.store.v1.Directory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::DirectoryNode > directories_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::FileNode > files_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::SymlinkNode > symlinks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_castore_2eproto;
};
// -------------------------------------------------------------------

class DirectoryNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tvix.store.v1.DirectoryNode) */ {
 public:
  inline DirectoryNode() : DirectoryNode(nullptr) {}
  ~DirectoryNode() override;
  explicit PROTOBUF_CONSTEXPR DirectoryNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectoryNode(const DirectoryNode& from);
  DirectoryNode(DirectoryNode&& from) noexcept
    : DirectoryNode() {
    *this = ::std::move(from);
  }

  inline DirectoryNode& operator=(const DirectoryNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectoryNode& operator=(DirectoryNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectoryNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectoryNode* internal_default_instance() {
    return reinterpret_cast<const DirectoryNode*>(
               &_DirectoryNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DirectoryNode& a, DirectoryNode& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectoryNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectoryNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirectoryNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirectoryNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectoryNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DirectoryNode& from) {
    DirectoryNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectoryNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tvix.store.v1.DirectoryNode";
  }
  protected:
  explicit DirectoryNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDigestFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes digest = 2;
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  PROTOBUF_NODISCARD std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // uint32 size = 3;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tvix.store.v1.DirectoryNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
    uint32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_castore_2eproto;
};
// -------------------------------------------------------------------

class FileNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tvix.store.v1.FileNode) */ {
 public:
  inline FileNode() : FileNode(nullptr) {}
  ~FileNode() override;
  explicit PROTOBUF_CONSTEXPR FileNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileNode(const FileNode& from);
  FileNode(FileNode&& from) noexcept
    : FileNode() {
    *this = ::std::move(from);
  }

  inline FileNode& operator=(const FileNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileNode& operator=(FileNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileNode* internal_default_instance() {
    return reinterpret_cast<const FileNode*>(
               &_FileNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileNode& a, FileNode& b) {
    a.Swap(&b);
  }
  inline void Swap(FileNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileNode& from) {
    FileNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tvix.store.v1.FileNode";
  }
  protected:
  explicit FileNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDigestFieldNumber = 2,
    kSizeFieldNumber = 3,
    kExecutableFieldNumber = 4,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes digest = 2;
  void clear_digest();
  const std::string& digest() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digest(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digest();
  PROTOBUF_NODISCARD std::string* release_digest();
  void set_allocated_digest(std::string* digest);
  private:
  const std::string& _internal_digest() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digest(const std::string& value);
  std::string* _internal_mutable_digest();
  public:

  // uint32 size = 3;
  void clear_size();
  uint32_t size() const;
  void set_size(uint32_t value);
  private:
  uint32_t _internal_size() const;
  void _internal_set_size(uint32_t value);
  public:

  // bool executable = 4;
  void clear_executable();
  bool executable() const;
  void set_executable(bool value);
  private:
  bool _internal_executable() const;
  void _internal_set_executable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tvix.store.v1.FileNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
    uint32_t size_;
    bool executable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_castore_2eproto;
};
// -------------------------------------------------------------------

class SymlinkNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tvix.store.v1.SymlinkNode) */ {
 public:
  inline SymlinkNode() : SymlinkNode(nullptr) {}
  ~SymlinkNode() override;
  explicit PROTOBUF_CONSTEXPR SymlinkNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SymlinkNode(const SymlinkNode& from);
  SymlinkNode(SymlinkNode&& from) noexcept
    : SymlinkNode() {
    *this = ::std::move(from);
  }

  inline SymlinkNode& operator=(const SymlinkNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymlinkNode& operator=(SymlinkNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SymlinkNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymlinkNode* internal_default_instance() {
    return reinterpret_cast<const SymlinkNode*>(
               &_SymlinkNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SymlinkNode& a, SymlinkNode& b) {
    a.Swap(&b);
  }
  inline void Swap(SymlinkNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymlinkNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SymlinkNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SymlinkNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SymlinkNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SymlinkNode& from) {
    SymlinkNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymlinkNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tvix.store.v1.SymlinkNode";
  }
  protected:
  explicit SymlinkNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes target = 2;
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:tvix.store.v1.SymlinkNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_castore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Directory

// repeated .tvix.store.v1.DirectoryNode directories = 1;
inline int Directory::_internal_directories_size() const {
  return _impl_.directories_.size();
}
inline int Directory::directories_size() const {
  return _internal_directories_size();
}
inline void Directory::clear_directories() {
  _impl_.directories_.Clear();
}
inline ::tvix::store::v1::DirectoryNode* Directory::mutable_directories(int index) {
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.Directory.directories)
  return _impl_.directories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::DirectoryNode >*
Directory::mutable_directories() {
  // @@protoc_insertion_point(field_mutable_list:tvix.store.v1.Directory.directories)
  return &_impl_.directories_;
}
inline const ::tvix::store::v1::DirectoryNode& Directory::_internal_directories(int index) const {
  return _impl_.directories_.Get(index);
}
inline const ::tvix::store::v1::DirectoryNode& Directory::directories(int index) const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.Directory.directories)
  return _internal_directories(index);
}
inline ::tvix::store::v1::DirectoryNode* Directory::_internal_add_directories() {
  return _impl_.directories_.Add();
}
inline ::tvix::store::v1::DirectoryNode* Directory::add_directories() {
  ::tvix::store::v1::DirectoryNode* _add = _internal_add_directories();
  // @@protoc_insertion_point(field_add:tvix.store.v1.Directory.directories)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::DirectoryNode >&
Directory::directories() const {
  // @@protoc_insertion_point(field_list:tvix.store.v1.Directory.directories)
  return _impl_.directories_;
}

// repeated .tvix.store.v1.FileNode files = 2;
inline int Directory::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int Directory::files_size() const {
  return _internal_files_size();
}
inline void Directory::clear_files() {
  _impl_.files_.Clear();
}
inline ::tvix::store::v1::FileNode* Directory::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.Directory.files)
  return _impl_.files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::FileNode >*
Directory::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:tvix.store.v1.Directory.files)
  return &_impl_.files_;
}
inline const ::tvix::store::v1::FileNode& Directory::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const ::tvix::store::v1::FileNode& Directory::files(int index) const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.Directory.files)
  return _internal_files(index);
}
inline ::tvix::store::v1::FileNode* Directory::_internal_add_files() {
  return _impl_.files_.Add();
}
inline ::tvix::store::v1::FileNode* Directory::add_files() {
  ::tvix::store::v1::FileNode* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:tvix.store.v1.Directory.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::FileNode >&
Directory::files() const {
  // @@protoc_insertion_point(field_list:tvix.store.v1.Directory.files)
  return _impl_.files_;
}

// repeated .tvix.store.v1.SymlinkNode symlinks = 3;
inline int Directory::_internal_symlinks_size() const {
  return _impl_.symlinks_.size();
}
inline int Directory::symlinks_size() const {
  return _internal_symlinks_size();
}
inline void Directory::clear_symlinks() {
  _impl_.symlinks_.Clear();
}
inline ::tvix::store::v1::SymlinkNode* Directory::mutable_symlinks(int index) {
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.Directory.symlinks)
  return _impl_.symlinks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::SymlinkNode >*
Directory::mutable_symlinks() {
  // @@protoc_insertion_point(field_mutable_list:tvix.store.v1.Directory.symlinks)
  return &_impl_.symlinks_;
}
inline const ::tvix::store::v1::SymlinkNode& Directory::_internal_symlinks(int index) const {
  return _impl_.symlinks_.Get(index);
}
inline const ::tvix::store::v1::SymlinkNode& Directory::symlinks(int index) const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.Directory.symlinks)
  return _internal_symlinks(index);
}
inline ::tvix::store::v1::SymlinkNode* Directory::_internal_add_symlinks() {
  return _impl_.symlinks_.Add();
}
inline ::tvix::store::v1::SymlinkNode* Directory::add_symlinks() {
  ::tvix::store::v1::SymlinkNode* _add = _internal_add_symlinks();
  // @@protoc_insertion_point(field_add:tvix.store.v1.Directory.symlinks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::SymlinkNode >&
Directory::symlinks() const {
  // @@protoc_insertion_point(field_list:tvix.store.v1.Directory.symlinks)
  return _impl_.symlinks_;
}

// -------------------------------------------------------------------

// DirectoryNode

// bytes name = 1;
inline void DirectoryNode::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DirectoryNode::name() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.DirectoryNode.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectoryNode::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tvix.store.v1.DirectoryNode.name)
}
inline std::string* DirectoryNode::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.DirectoryNode.name)
  return _s;
}
inline const std::string& DirectoryNode::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DirectoryNode::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DirectoryNode::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DirectoryNode::release_name() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.DirectoryNode.name)
  return _impl_.name_.Release();
}
inline void DirectoryNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.DirectoryNode.name)
}

// bytes digest = 2;
inline void DirectoryNode::clear_digest() {
  _impl_.digest_.ClearToEmpty();
}
inline const std::string& DirectoryNode::digest() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.DirectoryNode.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectoryNode::set_digest(ArgT0&& arg0, ArgT... args) {
 
 _impl_.digest_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tvix.store.v1.DirectoryNode.digest)
}
inline std::string* DirectoryNode::mutable_digest() {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.DirectoryNode.digest)
  return _s;
}
inline const std::string& DirectoryNode::_internal_digest() const {
  return _impl_.digest_.Get();
}
inline void DirectoryNode::_internal_set_digest(const std::string& value) {
  
  _impl_.digest_.Set(value, GetArenaForAllocation());
}
inline std::string* DirectoryNode::_internal_mutable_digest() {
  
  return _impl_.digest_.Mutable(GetArenaForAllocation());
}
inline std::string* DirectoryNode::release_digest() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.DirectoryNode.digest)
  return _impl_.digest_.Release();
}
inline void DirectoryNode::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    
  } else {
    
  }
  _impl_.digest_.SetAllocated(digest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.digest_.IsDefault()) {
    _impl_.digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.DirectoryNode.digest)
}

// uint32 size = 3;
inline void DirectoryNode::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t DirectoryNode::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t DirectoryNode::size() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.DirectoryNode.size)
  return _internal_size();
}
inline void DirectoryNode::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void DirectoryNode::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tvix.store.v1.DirectoryNode.size)
}

// -------------------------------------------------------------------

// FileNode

// bytes name = 1;
inline void FileNode::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FileNode::name() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.FileNode.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileNode::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tvix.store.v1.FileNode.name)
}
inline std::string* FileNode::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.FileNode.name)
  return _s;
}
inline const std::string& FileNode::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FileNode::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileNode::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileNode::release_name() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.FileNode.name)
  return _impl_.name_.Release();
}
inline void FileNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.FileNode.name)
}

// bytes digest = 2;
inline void FileNode::clear_digest() {
  _impl_.digest_.ClearToEmpty();
}
inline const std::string& FileNode::digest() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.FileNode.digest)
  return _internal_digest();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileNode::set_digest(ArgT0&& arg0, ArgT... args) {
 
 _impl_.digest_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tvix.store.v1.FileNode.digest)
}
inline std::string* FileNode::mutable_digest() {
  std::string* _s = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.FileNode.digest)
  return _s;
}
inline const std::string& FileNode::_internal_digest() const {
  return _impl_.digest_.Get();
}
inline void FileNode::_internal_set_digest(const std::string& value) {
  
  _impl_.digest_.Set(value, GetArenaForAllocation());
}
inline std::string* FileNode::_internal_mutable_digest() {
  
  return _impl_.digest_.Mutable(GetArenaForAllocation());
}
inline std::string* FileNode::release_digest() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.FileNode.digest)
  return _impl_.digest_.Release();
}
inline void FileNode::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    
  } else {
    
  }
  _impl_.digest_.SetAllocated(digest, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.digest_.IsDefault()) {
    _impl_.digest_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.FileNode.digest)
}

// uint32 size = 3;
inline void FileNode::clear_size() {
  _impl_.size_ = 0u;
}
inline uint32_t FileNode::_internal_size() const {
  return _impl_.size_;
}
inline uint32_t FileNode::size() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.FileNode.size)
  return _internal_size();
}
inline void FileNode::_internal_set_size(uint32_t value) {
  
  _impl_.size_ = value;
}
inline void FileNode::set_size(uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tvix.store.v1.FileNode.size)
}

// bool executable = 4;
inline void FileNode::clear_executable() {
  _impl_.executable_ = false;
}
inline bool FileNode::_internal_executable() const {
  return _impl_.executable_;
}
inline bool FileNode::executable() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.FileNode.executable)
  return _internal_executable();
}
inline void FileNode::_internal_set_executable(bool value) {
  
  _impl_.executable_ = value;
}
inline void FileNode::set_executable(bool value) {
  _internal_set_executable(value);
  // @@protoc_insertion_point(field_set:tvix.store.v1.FileNode.executable)
}

// -------------------------------------------------------------------

// SymlinkNode

// bytes name = 1;
inline void SymlinkNode::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SymlinkNode::name() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.SymlinkNode.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SymlinkNode::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tvix.store.v1.SymlinkNode.name)
}
inline std::string* SymlinkNode::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.SymlinkNode.name)
  return _s;
}
inline const std::string& SymlinkNode::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SymlinkNode::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SymlinkNode::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SymlinkNode::release_name() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.SymlinkNode.name)
  return _impl_.name_.Release();
}
inline void SymlinkNode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.SymlinkNode.name)
}

// bytes target = 2;
inline void SymlinkNode::clear_target() {
  _impl_.target_.ClearToEmpty();
}
inline const std::string& SymlinkNode::target() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.SymlinkNode.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SymlinkNode::set_target(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tvix.store.v1.SymlinkNode.target)
}
inline std::string* SymlinkNode::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.SymlinkNode.target)
  return _s;
}
inline const std::string& SymlinkNode::_internal_target() const {
  return _impl_.target_.Get();
}
inline void SymlinkNode::_internal_set_target(const std::string& value) {
  
  _impl_.target_.Set(value, GetArenaForAllocation());
}
inline std::string* SymlinkNode::_internal_mutable_target() {
  
  return _impl_.target_.Mutable(GetArenaForAllocation());
}
inline std::string* SymlinkNode::release_target() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.SymlinkNode.target)
  return _impl_.target_.Release();
}
inline void SymlinkNode::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  _impl_.target_.SetAllocated(target, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_.IsDefault()) {
    _impl_.target_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.SymlinkNode.target)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace store
}  // namespace tvix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_castore_2eproto

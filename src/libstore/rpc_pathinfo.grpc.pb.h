// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc_pathinfo.proto
// Original file comments:
// SPDX-License-Identifier: MIT
// Copyright Â© 2022 The Tvix Authors
#ifndef GRPC_rpc_5fpathinfo_2eproto__INCLUDED
#define GRPC_rpc_5fpathinfo_2eproto__INCLUDED

#include "rpc_pathinfo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace tvix {
namespace store {
namespace v1 {

class PathInfoService final {
 public:
  static constexpr char const* service_full_name() {
    return "tvix.store.v1.PathInfoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Return a PathInfo message matching the criteria specified in the
    // GetPathInfoRequest message.
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest& request, ::tvix::store::v1::PathInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>> AsyncGet(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>> PrepareAsyncGet(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // Upload a PathInfo object to the remote end. It MUST not return until the
    // PathInfo object has been written on the the remote end.
    //
    // The remote end MAY check if a potential DirectoryNode has already been
    // uploaded.
    //
    // Uploading clients SHOULD obviously not steer other machines to try to
    // substitute before from the remote end before having finished uploading
    // PathInfo, Directories and Blobs.
    // The returned PathInfo object MAY contain additional narinfo signatures,
    // but is otherwise left untouched.
    virtual ::grpc::Status Put(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo& request, ::tvix::store::v1::PathInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>> AsyncPut(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>> PrepareAsyncPut(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>>(PrepareAsyncPutRaw(context, request, cq));
    }
    // Calculate the NAR representation of the contents specified by the
    // root_node. The calculation SHOULD be cached server-side for subsequent
    // requests.
    //
    // All references (to blobs or Directory messages) MUST already exist in
    // the store.
    //
    // The method can be used to produce a Nix fixed-output path, which
    // contains the (compressed) sha256 of the NAR content representation in
    // the root_node name (suffixed with the name).
    //
    // It can also be used to calculate arbitrary NAR hashes of output paths,
    // in case a legacy Nix Binary Cache frontend is provided.
    virtual ::grpc::Status CalculateNAR(::grpc::ClientContext* context, const ::tvix::store::v1::Node& request, ::tvix::store::v1::CalculateNARResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::CalculateNARResponse>> AsyncCalculateNAR(::grpc::ClientContext* context, const ::tvix::store::v1::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::CalculateNARResponse>>(AsyncCalculateNARRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::CalculateNARResponse>> PrepareAsyncCalculateNAR(::grpc::ClientContext* context, const ::tvix::store::v1::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::CalculateNARResponse>>(PrepareAsyncCalculateNARRaw(context, request, cq));
    }
    // Return a stream of PathInfo messages matching the criteria specified in
    // ListPathInfoRequest.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tvix::store::v1::PathInfo>> List(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tvix::store::v1::PathInfo>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tvix::store::v1::PathInfo>> AsyncList(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tvix::store::v1::PathInfo>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tvix::store::v1::PathInfo>> PrepareAsyncList(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tvix::store::v1::PathInfo>>(PrepareAsyncListRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Return a PathInfo message matching the criteria specified in the
      // GetPathInfoRequest message.
      virtual void Get(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest* request, ::tvix::store::v1::PathInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest* request, ::tvix::store::v1::PathInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Upload a PathInfo object to the remote end. It MUST not return until the
      // PathInfo object has been written on the the remote end.
      //
      // The remote end MAY check if a potential DirectoryNode has already been
      // uploaded.
      //
      // Uploading clients SHOULD obviously not steer other machines to try to
      // substitute before from the remote end before having finished uploading
      // PathInfo, Directories and Blobs.
      // The returned PathInfo object MAY contain additional narinfo signatures,
      // but is otherwise left untouched.
      virtual void Put(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo* request, ::tvix::store::v1::PathInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo* request, ::tvix::store::v1::PathInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Calculate the NAR representation of the contents specified by the
      // root_node. The calculation SHOULD be cached server-side for subsequent
      // requests.
      //
      // All references (to blobs or Directory messages) MUST already exist in
      // the store.
      //
      // The method can be used to produce a Nix fixed-output path, which
      // contains the (compressed) sha256 of the NAR content representation in
      // the root_node name (suffixed with the name).
      //
      // It can also be used to calculate arbitrary NAR hashes of output paths,
      // in case a legacy Nix Binary Cache frontend is provided.
      virtual void CalculateNAR(::grpc::ClientContext* context, const ::tvix::store::v1::Node* request, ::tvix::store::v1::CalculateNARResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CalculateNAR(::grpc::ClientContext* context, const ::tvix::store::v1::Node* request, ::tvix::store::v1::CalculateNARResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return a stream of PathInfo messages matching the criteria specified in
      // ListPathInfoRequest.
      virtual void List(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest* request, ::grpc::ClientReadReactor< ::tvix::store::v1::PathInfo>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>* AsyncGetRaw(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>* AsyncPutRaw(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::PathInfo>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::CalculateNARResponse>* AsyncCalculateNARRaw(::grpc::ClientContext* context, const ::tvix::store::v1::Node& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tvix::store::v1::CalculateNARResponse>* PrepareAsyncCalculateNARRaw(::grpc::ClientContext* context, const ::tvix::store::v1::Node& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tvix::store::v1::PathInfo>* ListRaw(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tvix::store::v1::PathInfo>* AsyncListRaw(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tvix::store::v1::PathInfo>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Get(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest& request, ::tvix::store::v1::PathInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>> AsyncGet(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>> PrepareAsyncGet(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Put(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo& request, ::tvix::store::v1::PathInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>> AsyncPut(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>> PrepareAsyncPut(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>>(PrepareAsyncPutRaw(context, request, cq));
    }
    ::grpc::Status CalculateNAR(::grpc::ClientContext* context, const ::tvix::store::v1::Node& request, ::tvix::store::v1::CalculateNARResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::CalculateNARResponse>> AsyncCalculateNAR(::grpc::ClientContext* context, const ::tvix::store::v1::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::CalculateNARResponse>>(AsyncCalculateNARRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::CalculateNARResponse>> PrepareAsyncCalculateNAR(::grpc::ClientContext* context, const ::tvix::store::v1::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::CalculateNARResponse>>(PrepareAsyncCalculateNARRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tvix::store::v1::PathInfo>> List(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tvix::store::v1::PathInfo>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tvix::store::v1::PathInfo>> AsyncList(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tvix::store::v1::PathInfo>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tvix::store::v1::PathInfo>> PrepareAsyncList(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tvix::store::v1::PathInfo>>(PrepareAsyncListRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Get(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest* request, ::tvix::store::v1::PathInfo* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest* request, ::tvix::store::v1::PathInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Put(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo* request, ::tvix::store::v1::PathInfo* response, std::function<void(::grpc::Status)>) override;
      void Put(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo* request, ::tvix::store::v1::PathInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CalculateNAR(::grpc::ClientContext* context, const ::tvix::store::v1::Node* request, ::tvix::store::v1::CalculateNARResponse* response, std::function<void(::grpc::Status)>) override;
      void CalculateNAR(::grpc::ClientContext* context, const ::tvix::store::v1::Node* request, ::tvix::store::v1::CalculateNARResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void List(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest* request, ::grpc::ClientReadReactor< ::tvix::store::v1::PathInfo>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>* AsyncGetRaw(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::tvix::store::v1::GetPathInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>* AsyncPutRaw(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::PathInfo>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::tvix::store::v1::PathInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::CalculateNARResponse>* AsyncCalculateNARRaw(::grpc::ClientContext* context, const ::tvix::store::v1::Node& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tvix::store::v1::CalculateNARResponse>* PrepareAsyncCalculateNARRaw(::grpc::ClientContext* context, const ::tvix::store::v1::Node& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tvix::store::v1::PathInfo>* ListRaw(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request) override;
    ::grpc::ClientAsyncReader< ::tvix::store::v1::PathInfo>* AsyncListRaw(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tvix::store::v1::PathInfo>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::tvix::store::v1::ListPathInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Put_;
    const ::grpc::internal::RpcMethod rpcmethod_CalculateNAR_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Return a PathInfo message matching the criteria specified in the
    // GetPathInfoRequest message.
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::tvix::store::v1::GetPathInfoRequest* request, ::tvix::store::v1::PathInfo* response);
    // Upload a PathInfo object to the remote end. It MUST not return until the
    // PathInfo object has been written on the the remote end.
    //
    // The remote end MAY check if a potential DirectoryNode has already been
    // uploaded.
    //
    // Uploading clients SHOULD obviously not steer other machines to try to
    // substitute before from the remote end before having finished uploading
    // PathInfo, Directories and Blobs.
    // The returned PathInfo object MAY contain additional narinfo signatures,
    // but is otherwise left untouched.
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::tvix::store::v1::PathInfo* request, ::tvix::store::v1::PathInfo* response);
    // Calculate the NAR representation of the contents specified by the
    // root_node. The calculation SHOULD be cached server-side for subsequent
    // requests.
    //
    // All references (to blobs or Directory messages) MUST already exist in
    // the store.
    //
    // The method can be used to produce a Nix fixed-output path, which
    // contains the (compressed) sha256 of the NAR content representation in
    // the root_node name (suffixed with the name).
    //
    // It can also be used to calculate arbitrary NAR hashes of output paths,
    // in case a legacy Nix Binary Cache frontend is provided.
    virtual ::grpc::Status CalculateNAR(::grpc::ServerContext* context, const ::tvix::store::v1::Node* request, ::tvix::store::v1::CalculateNARResponse* response);
    // Return a stream of PathInfo messages matching the criteria specified in
    // ListPathInfoRequest.
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::tvix::store::v1::ListPathInfoRequest* request, ::grpc::ServerWriter< ::tvix::store::v1::PathInfo>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::GetPathInfoRequest* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::tvix::store::v1::GetPathInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::tvix::store::v1::PathInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::PathInfo* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::tvix::store::v1::PathInfo* request, ::grpc::ServerAsyncResponseWriter< ::tvix::store::v1::PathInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CalculateNAR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CalculateNAR() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CalculateNAR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalculateNAR(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::Node* /*request*/, ::tvix::store::v1::CalculateNARResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCalculateNAR(::grpc::ServerContext* context, ::tvix::store::v1::Node* request, ::grpc::ServerAsyncResponseWriter< ::tvix::store::v1::CalculateNARResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::ListPathInfoRequest* /*request*/, ::grpc::ServerWriter< ::tvix::store::v1::PathInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::tvix::store::v1::ListPathInfoRequest* request, ::grpc::ServerAsyncWriter< ::tvix::store::v1::PathInfo>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Get<WithAsyncMethod_Put<WithAsyncMethod_CalculateNAR<WithAsyncMethod_List<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tvix::store::v1::GetPathInfoRequest, ::tvix::store::v1::PathInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tvix::store::v1::GetPathInfoRequest* request, ::tvix::store::v1::PathInfo* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::tvix::store::v1::GetPathInfoRequest, ::tvix::store::v1::PathInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tvix::store::v1::GetPathInfoRequest, ::tvix::store::v1::PathInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::GetPathInfoRequest* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::tvix::store::v1::GetPathInfoRequest* /*request*/, ::tvix::store::v1::PathInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Put() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::tvix::store::v1::PathInfo, ::tvix::store::v1::PathInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tvix::store::v1::PathInfo* request, ::tvix::store::v1::PathInfo* response) { return this->Put(context, request, response); }));}
    void SetMessageAllocatorFor_Put(
        ::grpc::MessageAllocator< ::tvix::store::v1::PathInfo, ::tvix::store::v1::PathInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tvix::store::v1::PathInfo, ::tvix::store::v1::PathInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::PathInfo* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::tvix::store::v1::PathInfo* /*request*/, ::tvix::store::v1::PathInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CalculateNAR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CalculateNAR() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::tvix::store::v1::Node, ::tvix::store::v1::CalculateNARResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tvix::store::v1::Node* request, ::tvix::store::v1::CalculateNARResponse* response) { return this->CalculateNAR(context, request, response); }));}
    void SetMessageAllocatorFor_CalculateNAR(
        ::grpc::MessageAllocator< ::tvix::store::v1::Node, ::tvix::store::v1::CalculateNARResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tvix::store::v1::Node, ::tvix::store::v1::CalculateNARResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CalculateNAR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalculateNAR(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::Node* /*request*/, ::tvix::store::v1::CalculateNARResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CalculateNAR(
      ::grpc::CallbackServerContext* /*context*/, const ::tvix::store::v1::Node* /*request*/, ::tvix::store::v1::CalculateNARResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_List() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::tvix::store::v1::ListPathInfoRequest, ::tvix::store::v1::PathInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tvix::store::v1::ListPathInfoRequest* request) { return this->List(context, request); }));
    }
    ~WithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::ListPathInfoRequest* /*request*/, ::grpc::ServerWriter< ::tvix::store::v1::PathInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::tvix::store::v1::PathInfo>* List(
      ::grpc::CallbackServerContext* /*context*/, const ::tvix::store::v1::ListPathInfoRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Get<WithCallbackMethod_Put<WithCallbackMethod_CalculateNAR<WithCallbackMethod_List<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::GetPathInfoRequest* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::PathInfo* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CalculateNAR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CalculateNAR() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CalculateNAR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalculateNAR(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::Node* /*request*/, ::tvix::store::v1::CalculateNARResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::ListPathInfoRequest* /*request*/, ::grpc::ServerWriter< ::tvix::store::v1::PathInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::GetPathInfoRequest* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Put() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::PathInfo* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CalculateNAR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CalculateNAR() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CalculateNAR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalculateNAR(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::Node* /*request*/, ::tvix::store::v1::CalculateNARResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCalculateNAR(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::ListPathInfoRequest* /*request*/, ::grpc::ServerWriter< ::tvix::store::v1::PathInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::GetPathInfoRequest* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Put() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Put(context, request, response); }));
    }
    ~WithRawCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::PathInfo* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CalculateNAR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CalculateNAR() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CalculateNAR(context, request, response); }));
    }
    ~WithRawCallbackMethod_CalculateNAR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CalculateNAR(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::Node* /*request*/, ::tvix::store::v1::CalculateNARResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CalculateNAR(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_List() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->List(context, request); }));
    }
    ~WithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::ListPathInfoRequest* /*request*/, ::grpc::ServerWriter< ::tvix::store::v1::PathInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* List(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tvix::store::v1::GetPathInfoRequest, ::tvix::store::v1::PathInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tvix::store::v1::GetPathInfoRequest, ::tvix::store::v1::PathInfo>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::GetPathInfoRequest* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tvix::store::v1::GetPathInfoRequest,::tvix::store::v1::PathInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Put() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tvix::store::v1::PathInfo, ::tvix::store::v1::PathInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tvix::store::v1::PathInfo, ::tvix::store::v1::PathInfo>* streamer) {
                       return this->StreamedPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::PathInfo* /*request*/, ::tvix::store::v1::PathInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tvix::store::v1::PathInfo,::tvix::store::v1::PathInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CalculateNAR : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CalculateNAR() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tvix::store::v1::Node, ::tvix::store::v1::CalculateNARResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tvix::store::v1::Node, ::tvix::store::v1::CalculateNARResponse>* streamer) {
                       return this->StreamedCalculateNAR(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CalculateNAR() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CalculateNAR(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::Node* /*request*/, ::tvix::store::v1::CalculateNARResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCalculateNAR(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tvix::store::v1::Node,::tvix::store::v1::CalculateNARResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_CalculateNAR<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_List() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tvix::store::v1::ListPathInfoRequest, ::tvix::store::v1::PathInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::tvix::store::v1::ListPathInfoRequest, ::tvix::store::v1::PathInfo>* streamer) {
                       return this->StreamedList(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* /*context*/, const ::tvix::store::v1::ListPathInfoRequest* /*request*/, ::grpc::ServerWriter< ::tvix::store::v1::PathInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tvix::store::v1::ListPathInfoRequest,::tvix::store::v1::PathInfo>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_List<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_CalculateNAR<WithSplitStreamingMethod_List<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace store
}  // namespace tvix


#endif  // GRPC_rpc_5fpathinfo_2eproto__INCLUDED

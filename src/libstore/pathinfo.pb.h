// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pathinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pathinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pathinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "castore.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pathinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pathinfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pathinfo_2eproto;
namespace tvix {
namespace store {
namespace v1 {
class NARInfo;
struct NARInfoDefaultTypeInternal;
extern NARInfoDefaultTypeInternal _NARInfo_default_instance_;
class NARInfo_Signature;
struct NARInfo_SignatureDefaultTypeInternal;
extern NARInfo_SignatureDefaultTypeInternal _NARInfo_Signature_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class PathInfo;
struct PathInfoDefaultTypeInternal;
extern PathInfoDefaultTypeInternal _PathInfo_default_instance_;
}  // namespace v1
}  // namespace store
}  // namespace tvix
PROTOBUF_NAMESPACE_OPEN
template<> ::tvix::store::v1::NARInfo* Arena::CreateMaybeMessage<::tvix::store::v1::NARInfo>(Arena*);
template<> ::tvix::store::v1::NARInfo_Signature* Arena::CreateMaybeMessage<::tvix::store::v1::NARInfo_Signature>(Arena*);
template<> ::tvix::store::v1::Node* Arena::CreateMaybeMessage<::tvix::store::v1::Node>(Arena*);
template<> ::tvix::store::v1::PathInfo* Arena::CreateMaybeMessage<::tvix::store::v1::PathInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tvix {
namespace store {
namespace v1 {

// ===================================================================

class PathInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tvix.store.v1.PathInfo) */ {
 public:
  inline PathInfo() : PathInfo(nullptr) {}
  ~PathInfo() override;
  explicit PROTOBUF_CONSTEXPR PathInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathInfo(const PathInfo& from);
  PathInfo(PathInfo&& from) noexcept
    : PathInfo() {
    *this = ::std::move(from);
  }

  inline PathInfo& operator=(const PathInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathInfo& operator=(PathInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathInfo* internal_default_instance() {
    return reinterpret_cast<const PathInfo*>(
               &_PathInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PathInfo& a, PathInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PathInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PathInfo& from) {
    PathInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tvix.store.v1.PathInfo";
  }
  protected:
  explicit PathInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferencesFieldNumber = 2,
    kNodeFieldNumber = 1,
    kNarinfoFieldNumber = 3,
  };
  // repeated bytes references = 2;
  int references_size() const;
  private:
  int _internal_references_size() const;
  public:
  void clear_references();
  const std::string& references(int index) const;
  std::string* mutable_references(int index);
  void set_references(int index, const std::string& value);
  void set_references(int index, std::string&& value);
  void set_references(int index, const char* value);
  void set_references(int index, const void* value, size_t size);
  std::string* add_references();
  void add_references(const std::string& value);
  void add_references(std::string&& value);
  void add_references(const char* value);
  void add_references(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_references();
  private:
  const std::string& _internal_references(int index) const;
  std::string* _internal_add_references();
  public:

  // .tvix.store.v1.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::tvix::store::v1::Node& node() const;
  PROTOBUF_NODISCARD ::tvix::store::v1::Node* release_node();
  ::tvix::store::v1::Node* mutable_node();
  void set_allocated_node(::tvix::store::v1::Node* node);
  private:
  const ::tvix::store::v1::Node& _internal_node() const;
  ::tvix::store::v1::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::tvix::store::v1::Node* node);
  ::tvix::store::v1::Node* unsafe_arena_release_node();

  // .tvix.store.v1.NARInfo narinfo = 3;
  bool has_narinfo() const;
  private:
  bool _internal_has_narinfo() const;
  public:
  void clear_narinfo();
  const ::tvix::store::v1::NARInfo& narinfo() const;
  PROTOBUF_NODISCARD ::tvix::store::v1::NARInfo* release_narinfo();
  ::tvix::store::v1::NARInfo* mutable_narinfo();
  void set_allocated_narinfo(::tvix::store::v1::NARInfo* narinfo);
  private:
  const ::tvix::store::v1::NARInfo& _internal_narinfo() const;
  ::tvix::store::v1::NARInfo* _internal_mutable_narinfo();
  public:
  void unsafe_arena_set_allocated_narinfo(
      ::tvix::store::v1::NARInfo* narinfo);
  ::tvix::store::v1::NARInfo* unsafe_arena_release_narinfo();

  // @@protoc_insertion_point(class_scope:tvix.store.v1.PathInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> references_;
    ::tvix::store::v1::Node* node_;
    ::tvix::store::v1::NARInfo* narinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pathinfo_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tvix.store.v1.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  enum NodeCase {
    kDirectory = 1,
    kFile = 2,
    kSymlink = 3,
    NODE_NOT_SET = 0,
  };

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tvix.store.v1.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectoryFieldNumber = 1,
    kFileFieldNumber = 2,
    kSymlinkFieldNumber = 3,
  };
  // .tvix.store.v1.DirectoryNode directory = 1;
  bool has_directory() const;
  private:
  bool _internal_has_directory() const;
  public:
  void clear_directory();
  const ::tvix::store::v1::DirectoryNode& directory() const;
  PROTOBUF_NODISCARD ::tvix::store::v1::DirectoryNode* release_directory();
  ::tvix::store::v1::DirectoryNode* mutable_directory();
  void set_allocated_directory(::tvix::store::v1::DirectoryNode* directory);
  private:
  const ::tvix::store::v1::DirectoryNode& _internal_directory() const;
  ::tvix::store::v1::DirectoryNode* _internal_mutable_directory();
  public:
  void unsafe_arena_set_allocated_directory(
      ::tvix::store::v1::DirectoryNode* directory);
  ::tvix::store::v1::DirectoryNode* unsafe_arena_release_directory();

  // .tvix.store.v1.FileNode file = 2;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::tvix::store::v1::FileNode& file() const;
  PROTOBUF_NODISCARD ::tvix::store::v1::FileNode* release_file();
  ::tvix::store::v1::FileNode* mutable_file();
  void set_allocated_file(::tvix::store::v1::FileNode* file);
  private:
  const ::tvix::store::v1::FileNode& _internal_file() const;
  ::tvix::store::v1::FileNode* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::tvix::store::v1::FileNode* file);
  ::tvix::store::v1::FileNode* unsafe_arena_release_file();

  // .tvix.store.v1.SymlinkNode symlink = 3;
  bool has_symlink() const;
  private:
  bool _internal_has_symlink() const;
  public:
  void clear_symlink();
  const ::tvix::store::v1::SymlinkNode& symlink() const;
  PROTOBUF_NODISCARD ::tvix::store::v1::SymlinkNode* release_symlink();
  ::tvix::store::v1::SymlinkNode* mutable_symlink();
  void set_allocated_symlink(::tvix::store::v1::SymlinkNode* symlink);
  private:
  const ::tvix::store::v1::SymlinkNode& _internal_symlink() const;
  ::tvix::store::v1::SymlinkNode* _internal_mutable_symlink();
  public:
  void unsafe_arena_set_allocated_symlink(
      ::tvix::store::v1::SymlinkNode* symlink);
  ::tvix::store::v1::SymlinkNode* unsafe_arena_release_symlink();

  void clear_node();
  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:tvix.store.v1.Node)
 private:
  class _Internal;
  void set_has_directory();
  void set_has_file();
  void set_has_symlink();

  inline bool has_node() const;
  inline void clear_has_node();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union NodeUnion {
      constexpr NodeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tvix::store::v1::DirectoryNode* directory_;
      ::tvix::store::v1::FileNode* file_;
      ::tvix::store::v1::SymlinkNode* symlink_;
    } node_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pathinfo_2eproto;
};
// -------------------------------------------------------------------

class NARInfo_Signature final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tvix.store.v1.NARInfo.Signature) */ {
 public:
  inline NARInfo_Signature() : NARInfo_Signature(nullptr) {}
  ~NARInfo_Signature() override;
  explicit PROTOBUF_CONSTEXPR NARInfo_Signature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NARInfo_Signature(const NARInfo_Signature& from);
  NARInfo_Signature(NARInfo_Signature&& from) noexcept
    : NARInfo_Signature() {
    *this = ::std::move(from);
  }

  inline NARInfo_Signature& operator=(const NARInfo_Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline NARInfo_Signature& operator=(NARInfo_Signature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NARInfo_Signature& default_instance() {
    return *internal_default_instance();
  }
  static inline const NARInfo_Signature* internal_default_instance() {
    return reinterpret_cast<const NARInfo_Signature*>(
               &_NARInfo_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NARInfo_Signature& a, NARInfo_Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(NARInfo_Signature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NARInfo_Signature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NARInfo_Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NARInfo_Signature>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NARInfo_Signature& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NARInfo_Signature& from) {
    NARInfo_Signature::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NARInfo_Signature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tvix.store.v1.NARInfo.Signature";
  }
  protected:
  explicit NARInfo_Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:tvix.store.v1.NARInfo.Signature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pathinfo_2eproto;
};
// -------------------------------------------------------------------

class NARInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tvix.store.v1.NARInfo) */ {
 public:
  inline NARInfo() : NARInfo(nullptr) {}
  ~NARInfo() override;
  explicit PROTOBUF_CONSTEXPR NARInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NARInfo(const NARInfo& from);
  NARInfo(NARInfo&& from) noexcept
    : NARInfo() {
    *this = ::std::move(from);
  }

  inline NARInfo& operator=(const NARInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NARInfo& operator=(NARInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NARInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NARInfo* internal_default_instance() {
    return reinterpret_cast<const NARInfo*>(
               &_NARInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NARInfo& a, NARInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NARInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NARInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NARInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NARInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NARInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NARInfo& from) {
    NARInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NARInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tvix.store.v1.NARInfo";
  }
  protected:
  explicit NARInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NARInfo_Signature Signature;

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 3,
    kReferenceNamesFieldNumber = 4,
    kNarSha256FieldNumber = 2,
    kNarSizeFieldNumber = 1,
  };
  // repeated .tvix.store.v1.NARInfo.Signature signatures = 3;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  ::tvix::store::v1::NARInfo_Signature* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::NARInfo_Signature >*
      mutable_signatures();
  private:
  const ::tvix::store::v1::NARInfo_Signature& _internal_signatures(int index) const;
  ::tvix::store::v1::NARInfo_Signature* _internal_add_signatures();
  public:
  const ::tvix::store::v1::NARInfo_Signature& signatures(int index) const;
  ::tvix::store::v1::NARInfo_Signature* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::NARInfo_Signature >&
      signatures() const;

  // repeated string reference_names = 4;
  int reference_names_size() const;
  private:
  int _internal_reference_names_size() const;
  public:
  void clear_reference_names();
  const std::string& reference_names(int index) const;
  std::string* mutable_reference_names(int index);
  void set_reference_names(int index, const std::string& value);
  void set_reference_names(int index, std::string&& value);
  void set_reference_names(int index, const char* value);
  void set_reference_names(int index, const char* value, size_t size);
  std::string* add_reference_names();
  void add_reference_names(const std::string& value);
  void add_reference_names(std::string&& value);
  void add_reference_names(const char* value);
  void add_reference_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reference_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reference_names();
  private:
  const std::string& _internal_reference_names(int index) const;
  std::string* _internal_add_reference_names();
  public:

  // bytes nar_sha256 = 2;
  void clear_nar_sha256();
  const std::string& nar_sha256() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nar_sha256(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nar_sha256();
  PROTOBUF_NODISCARD std::string* release_nar_sha256();
  void set_allocated_nar_sha256(std::string* nar_sha256);
  private:
  const std::string& _internal_nar_sha256() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nar_sha256(const std::string& value);
  std::string* _internal_mutable_nar_sha256();
  public:

  // uint64 nar_size = 1;
  void clear_nar_size();
  uint64_t nar_size() const;
  void set_nar_size(uint64_t value);
  private:
  uint64_t _internal_nar_size() const;
  void _internal_set_nar_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tvix.store.v1.NARInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::NARInfo_Signature > signatures_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reference_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nar_sha256_;
    uint64_t nar_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pathinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathInfo

// .tvix.store.v1.Node node = 1;
inline bool PathInfo::_internal_has_node() const {
  return this != internal_default_instance() && _impl_.node_ != nullptr;
}
inline bool PathInfo::has_node() const {
  return _internal_has_node();
}
inline void PathInfo::clear_node() {
  if (GetArenaForAllocation() == nullptr && _impl_.node_ != nullptr) {
    delete _impl_.node_;
  }
  _impl_.node_ = nullptr;
}
inline const ::tvix::store::v1::Node& PathInfo::_internal_node() const {
  const ::tvix::store::v1::Node* p = _impl_.node_;
  return p != nullptr ? *p : reinterpret_cast<const ::tvix::store::v1::Node&>(
      ::tvix::store::v1::_Node_default_instance_);
}
inline const ::tvix::store::v1::Node& PathInfo::node() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.PathInfo.node)
  return _internal_node();
}
inline void PathInfo::unsafe_arena_set_allocated_node(
    ::tvix::store::v1::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_);
  }
  _impl_.node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tvix.store.v1.PathInfo.node)
}
inline ::tvix::store::v1::Node* PathInfo::release_node() {
  
  ::tvix::store::v1::Node* temp = _impl_.node_;
  _impl_.node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tvix::store::v1::Node* PathInfo::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.PathInfo.node)
  
  ::tvix::store::v1::Node* temp = _impl_.node_;
  _impl_.node_ = nullptr;
  return temp;
}
inline ::tvix::store::v1::Node* PathInfo::_internal_mutable_node() {
  
  if (_impl_.node_ == nullptr) {
    auto* p = CreateMaybeMessage<::tvix::store::v1::Node>(GetArenaForAllocation());
    _impl_.node_ = p;
  }
  return _impl_.node_;
}
inline ::tvix::store::v1::Node* PathInfo::mutable_node() {
  ::tvix::store::v1::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.PathInfo.node)
  return _msg;
}
inline void PathInfo::set_allocated_node(::tvix::store::v1::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.node_ = node;
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.PathInfo.node)
}

// repeated bytes references = 2;
inline int PathInfo::_internal_references_size() const {
  return _impl_.references_.size();
}
inline int PathInfo::references_size() const {
  return _internal_references_size();
}
inline void PathInfo::clear_references() {
  _impl_.references_.Clear();
}
inline std::string* PathInfo::add_references() {
  std::string* _s = _internal_add_references();
  // @@protoc_insertion_point(field_add_mutable:tvix.store.v1.PathInfo.references)
  return _s;
}
inline const std::string& PathInfo::_internal_references(int index) const {
  return _impl_.references_.Get(index);
}
inline const std::string& PathInfo::references(int index) const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.PathInfo.references)
  return _internal_references(index);
}
inline std::string* PathInfo::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.PathInfo.references)
  return _impl_.references_.Mutable(index);
}
inline void PathInfo::set_references(int index, const std::string& value) {
  _impl_.references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tvix.store.v1.PathInfo.references)
}
inline void PathInfo::set_references(int index, std::string&& value) {
  _impl_.references_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tvix.store.v1.PathInfo.references)
}
inline void PathInfo::set_references(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tvix.store.v1.PathInfo.references)
}
inline void PathInfo::set_references(int index, const void* value, size_t size) {
  _impl_.references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tvix.store.v1.PathInfo.references)
}
inline std::string* PathInfo::_internal_add_references() {
  return _impl_.references_.Add();
}
inline void PathInfo::add_references(const std::string& value) {
  _impl_.references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tvix.store.v1.PathInfo.references)
}
inline void PathInfo::add_references(std::string&& value) {
  _impl_.references_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tvix.store.v1.PathInfo.references)
}
inline void PathInfo::add_references(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tvix.store.v1.PathInfo.references)
}
inline void PathInfo::add_references(const void* value, size_t size) {
  _impl_.references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tvix.store.v1.PathInfo.references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PathInfo::references() const {
  // @@protoc_insertion_point(field_list:tvix.store.v1.PathInfo.references)
  return _impl_.references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PathInfo::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:tvix.store.v1.PathInfo.references)
  return &_impl_.references_;
}

// .tvix.store.v1.NARInfo narinfo = 3;
inline bool PathInfo::_internal_has_narinfo() const {
  return this != internal_default_instance() && _impl_.narinfo_ != nullptr;
}
inline bool PathInfo::has_narinfo() const {
  return _internal_has_narinfo();
}
inline void PathInfo::clear_narinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.narinfo_ != nullptr) {
    delete _impl_.narinfo_;
  }
  _impl_.narinfo_ = nullptr;
}
inline const ::tvix::store::v1::NARInfo& PathInfo::_internal_narinfo() const {
  const ::tvix::store::v1::NARInfo* p = _impl_.narinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::tvix::store::v1::NARInfo&>(
      ::tvix::store::v1::_NARInfo_default_instance_);
}
inline const ::tvix::store::v1::NARInfo& PathInfo::narinfo() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.PathInfo.narinfo)
  return _internal_narinfo();
}
inline void PathInfo::unsafe_arena_set_allocated_narinfo(
    ::tvix::store::v1::NARInfo* narinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.narinfo_);
  }
  _impl_.narinfo_ = narinfo;
  if (narinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tvix.store.v1.PathInfo.narinfo)
}
inline ::tvix::store::v1::NARInfo* PathInfo::release_narinfo() {
  
  ::tvix::store::v1::NARInfo* temp = _impl_.narinfo_;
  _impl_.narinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tvix::store::v1::NARInfo* PathInfo::unsafe_arena_release_narinfo() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.PathInfo.narinfo)
  
  ::tvix::store::v1::NARInfo* temp = _impl_.narinfo_;
  _impl_.narinfo_ = nullptr;
  return temp;
}
inline ::tvix::store::v1::NARInfo* PathInfo::_internal_mutable_narinfo() {
  
  if (_impl_.narinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::tvix::store::v1::NARInfo>(GetArenaForAllocation());
    _impl_.narinfo_ = p;
  }
  return _impl_.narinfo_;
}
inline ::tvix::store::v1::NARInfo* PathInfo::mutable_narinfo() {
  ::tvix::store::v1::NARInfo* _msg = _internal_mutable_narinfo();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.PathInfo.narinfo)
  return _msg;
}
inline void PathInfo::set_allocated_narinfo(::tvix::store::v1::NARInfo* narinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.narinfo_;
  }
  if (narinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(narinfo);
    if (message_arena != submessage_arena) {
      narinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, narinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.narinfo_ = narinfo;
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.PathInfo.narinfo)
}

// -------------------------------------------------------------------

// Node

// .tvix.store.v1.DirectoryNode directory = 1;
inline bool Node::_internal_has_directory() const {
  return node_case() == kDirectory;
}
inline bool Node::has_directory() const {
  return _internal_has_directory();
}
inline void Node::set_has_directory() {
  _impl_._oneof_case_[0] = kDirectory;
}
inline ::tvix::store::v1::DirectoryNode* Node::release_directory() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.Node.directory)
  if (_internal_has_directory()) {
    clear_has_node();
    ::tvix::store::v1::DirectoryNode* temp = _impl_.node_.directory_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.node_.directory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tvix::store::v1::DirectoryNode& Node::_internal_directory() const {
  return _internal_has_directory()
      ? *_impl_.node_.directory_
      : reinterpret_cast< ::tvix::store::v1::DirectoryNode&>(::tvix::store::v1::_DirectoryNode_default_instance_);
}
inline const ::tvix::store::v1::DirectoryNode& Node::directory() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.Node.directory)
  return _internal_directory();
}
inline ::tvix::store::v1::DirectoryNode* Node::unsafe_arena_release_directory() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tvix.store.v1.Node.directory)
  if (_internal_has_directory()) {
    clear_has_node();
    ::tvix::store::v1::DirectoryNode* temp = _impl_.node_.directory_;
    _impl_.node_.directory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_directory(::tvix::store::v1::DirectoryNode* directory) {
  clear_node();
  if (directory) {
    set_has_directory();
    _impl_.node_.directory_ = directory;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tvix.store.v1.Node.directory)
}
inline ::tvix::store::v1::DirectoryNode* Node::_internal_mutable_directory() {
  if (!_internal_has_directory()) {
    clear_node();
    set_has_directory();
    _impl_.node_.directory_ = CreateMaybeMessage< ::tvix::store::v1::DirectoryNode >(GetArenaForAllocation());
  }
  return _impl_.node_.directory_;
}
inline ::tvix::store::v1::DirectoryNode* Node::mutable_directory() {
  ::tvix::store::v1::DirectoryNode* _msg = _internal_mutable_directory();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.Node.directory)
  return _msg;
}

// .tvix.store.v1.FileNode file = 2;
inline bool Node::_internal_has_file() const {
  return node_case() == kFile;
}
inline bool Node::has_file() const {
  return _internal_has_file();
}
inline void Node::set_has_file() {
  _impl_._oneof_case_[0] = kFile;
}
inline ::tvix::store::v1::FileNode* Node::release_file() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.Node.file)
  if (_internal_has_file()) {
    clear_has_node();
    ::tvix::store::v1::FileNode* temp = _impl_.node_.file_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.node_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tvix::store::v1::FileNode& Node::_internal_file() const {
  return _internal_has_file()
      ? *_impl_.node_.file_
      : reinterpret_cast< ::tvix::store::v1::FileNode&>(::tvix::store::v1::_FileNode_default_instance_);
}
inline const ::tvix::store::v1::FileNode& Node::file() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.Node.file)
  return _internal_file();
}
inline ::tvix::store::v1::FileNode* Node::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tvix.store.v1.Node.file)
  if (_internal_has_file()) {
    clear_has_node();
    ::tvix::store::v1::FileNode* temp = _impl_.node_.file_;
    _impl_.node_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_file(::tvix::store::v1::FileNode* file) {
  clear_node();
  if (file) {
    set_has_file();
    _impl_.node_.file_ = file;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tvix.store.v1.Node.file)
}
inline ::tvix::store::v1::FileNode* Node::_internal_mutable_file() {
  if (!_internal_has_file()) {
    clear_node();
    set_has_file();
    _impl_.node_.file_ = CreateMaybeMessage< ::tvix::store::v1::FileNode >(GetArenaForAllocation());
  }
  return _impl_.node_.file_;
}
inline ::tvix::store::v1::FileNode* Node::mutable_file() {
  ::tvix::store::v1::FileNode* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.Node.file)
  return _msg;
}

// .tvix.store.v1.SymlinkNode symlink = 3;
inline bool Node::_internal_has_symlink() const {
  return node_case() == kSymlink;
}
inline bool Node::has_symlink() const {
  return _internal_has_symlink();
}
inline void Node::set_has_symlink() {
  _impl_._oneof_case_[0] = kSymlink;
}
inline ::tvix::store::v1::SymlinkNode* Node::release_symlink() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.Node.symlink)
  if (_internal_has_symlink()) {
    clear_has_node();
    ::tvix::store::v1::SymlinkNode* temp = _impl_.node_.symlink_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.node_.symlink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tvix::store::v1::SymlinkNode& Node::_internal_symlink() const {
  return _internal_has_symlink()
      ? *_impl_.node_.symlink_
      : reinterpret_cast< ::tvix::store::v1::SymlinkNode&>(::tvix::store::v1::_SymlinkNode_default_instance_);
}
inline const ::tvix::store::v1::SymlinkNode& Node::symlink() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.Node.symlink)
  return _internal_symlink();
}
inline ::tvix::store::v1::SymlinkNode* Node::unsafe_arena_release_symlink() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tvix.store.v1.Node.symlink)
  if (_internal_has_symlink()) {
    clear_has_node();
    ::tvix::store::v1::SymlinkNode* temp = _impl_.node_.symlink_;
    _impl_.node_.symlink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Node::unsafe_arena_set_allocated_symlink(::tvix::store::v1::SymlinkNode* symlink) {
  clear_node();
  if (symlink) {
    set_has_symlink();
    _impl_.node_.symlink_ = symlink;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tvix.store.v1.Node.symlink)
}
inline ::tvix::store::v1::SymlinkNode* Node::_internal_mutable_symlink() {
  if (!_internal_has_symlink()) {
    clear_node();
    set_has_symlink();
    _impl_.node_.symlink_ = CreateMaybeMessage< ::tvix::store::v1::SymlinkNode >(GetArenaForAllocation());
  }
  return _impl_.node_.symlink_;
}
inline ::tvix::store::v1::SymlinkNode* Node::mutable_symlink() {
  ::tvix::store::v1::SymlinkNode* _msg = _internal_mutable_symlink();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.Node.symlink)
  return _msg;
}

inline bool Node::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void Node::clear_has_node() {
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}
inline Node::NodeCase Node::node_case() const {
  return Node::NodeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// NARInfo_Signature

// string name = 1;
inline void NARInfo_Signature::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NARInfo_Signature::name() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.NARInfo.Signature.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NARInfo_Signature::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tvix.store.v1.NARInfo.Signature.name)
}
inline std::string* NARInfo_Signature::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.NARInfo.Signature.name)
  return _s;
}
inline const std::string& NARInfo_Signature::_internal_name() const {
  return _impl_.name_.Get();
}
inline void NARInfo_Signature::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* NARInfo_Signature::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* NARInfo_Signature::release_name() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.NARInfo.Signature.name)
  return _impl_.name_.Release();
}
inline void NARInfo_Signature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.NARInfo.Signature.name)
}

// bytes data = 2;
inline void NARInfo_Signature::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& NARInfo_Signature::data() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.NARInfo.Signature.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NARInfo_Signature::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tvix.store.v1.NARInfo.Signature.data)
}
inline std::string* NARInfo_Signature::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.NARInfo.Signature.data)
  return _s;
}
inline const std::string& NARInfo_Signature::_internal_data() const {
  return _impl_.data_.Get();
}
inline void NARInfo_Signature::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* NARInfo_Signature::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* NARInfo_Signature::release_data() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.NARInfo.Signature.data)
  return _impl_.data_.Release();
}
inline void NARInfo_Signature::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.NARInfo.Signature.data)
}

// -------------------------------------------------------------------

// NARInfo

// uint64 nar_size = 1;
inline void NARInfo::clear_nar_size() {
  _impl_.nar_size_ = uint64_t{0u};
}
inline uint64_t NARInfo::_internal_nar_size() const {
  return _impl_.nar_size_;
}
inline uint64_t NARInfo::nar_size() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.NARInfo.nar_size)
  return _internal_nar_size();
}
inline void NARInfo::_internal_set_nar_size(uint64_t value) {
  
  _impl_.nar_size_ = value;
}
inline void NARInfo::set_nar_size(uint64_t value) {
  _internal_set_nar_size(value);
  // @@protoc_insertion_point(field_set:tvix.store.v1.NARInfo.nar_size)
}

// bytes nar_sha256 = 2;
inline void NARInfo::clear_nar_sha256() {
  _impl_.nar_sha256_.ClearToEmpty();
}
inline const std::string& NARInfo::nar_sha256() const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.NARInfo.nar_sha256)
  return _internal_nar_sha256();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NARInfo::set_nar_sha256(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nar_sha256_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tvix.store.v1.NARInfo.nar_sha256)
}
inline std::string* NARInfo::mutable_nar_sha256() {
  std::string* _s = _internal_mutable_nar_sha256();
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.NARInfo.nar_sha256)
  return _s;
}
inline const std::string& NARInfo::_internal_nar_sha256() const {
  return _impl_.nar_sha256_.Get();
}
inline void NARInfo::_internal_set_nar_sha256(const std::string& value) {
  
  _impl_.nar_sha256_.Set(value, GetArenaForAllocation());
}
inline std::string* NARInfo::_internal_mutable_nar_sha256() {
  
  return _impl_.nar_sha256_.Mutable(GetArenaForAllocation());
}
inline std::string* NARInfo::release_nar_sha256() {
  // @@protoc_insertion_point(field_release:tvix.store.v1.NARInfo.nar_sha256)
  return _impl_.nar_sha256_.Release();
}
inline void NARInfo::set_allocated_nar_sha256(std::string* nar_sha256) {
  if (nar_sha256 != nullptr) {
    
  } else {
    
  }
  _impl_.nar_sha256_.SetAllocated(nar_sha256, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nar_sha256_.IsDefault()) {
    _impl_.nar_sha256_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.NARInfo.nar_sha256)
}

// repeated .tvix.store.v1.NARInfo.Signature signatures = 3;
inline int NARInfo::_internal_signatures_size() const {
  return _impl_.signatures_.size();
}
inline int NARInfo::signatures_size() const {
  return _internal_signatures_size();
}
inline void NARInfo::clear_signatures() {
  _impl_.signatures_.Clear();
}
inline ::tvix::store::v1::NARInfo_Signature* NARInfo::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.NARInfo.signatures)
  return _impl_.signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::NARInfo_Signature >*
NARInfo::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:tvix.store.v1.NARInfo.signatures)
  return &_impl_.signatures_;
}
inline const ::tvix::store::v1::NARInfo_Signature& NARInfo::_internal_signatures(int index) const {
  return _impl_.signatures_.Get(index);
}
inline const ::tvix::store::v1::NARInfo_Signature& NARInfo::signatures(int index) const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.NARInfo.signatures)
  return _internal_signatures(index);
}
inline ::tvix::store::v1::NARInfo_Signature* NARInfo::_internal_add_signatures() {
  return _impl_.signatures_.Add();
}
inline ::tvix::store::v1::NARInfo_Signature* NARInfo::add_signatures() {
  ::tvix::store::v1::NARInfo_Signature* _add = _internal_add_signatures();
  // @@protoc_insertion_point(field_add:tvix.store.v1.NARInfo.signatures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tvix::store::v1::NARInfo_Signature >&
NARInfo::signatures() const {
  // @@protoc_insertion_point(field_list:tvix.store.v1.NARInfo.signatures)
  return _impl_.signatures_;
}

// repeated string reference_names = 4;
inline int NARInfo::_internal_reference_names_size() const {
  return _impl_.reference_names_.size();
}
inline int NARInfo::reference_names_size() const {
  return _internal_reference_names_size();
}
inline void NARInfo::clear_reference_names() {
  _impl_.reference_names_.Clear();
}
inline std::string* NARInfo::add_reference_names() {
  std::string* _s = _internal_add_reference_names();
  // @@protoc_insertion_point(field_add_mutable:tvix.store.v1.NARInfo.reference_names)
  return _s;
}
inline const std::string& NARInfo::_internal_reference_names(int index) const {
  return _impl_.reference_names_.Get(index);
}
inline const std::string& NARInfo::reference_names(int index) const {
  // @@protoc_insertion_point(field_get:tvix.store.v1.NARInfo.reference_names)
  return _internal_reference_names(index);
}
inline std::string* NARInfo::mutable_reference_names(int index) {
  // @@protoc_insertion_point(field_mutable:tvix.store.v1.NARInfo.reference_names)
  return _impl_.reference_names_.Mutable(index);
}
inline void NARInfo::set_reference_names(int index, const std::string& value) {
  _impl_.reference_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tvix.store.v1.NARInfo.reference_names)
}
inline void NARInfo::set_reference_names(int index, std::string&& value) {
  _impl_.reference_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tvix.store.v1.NARInfo.reference_names)
}
inline void NARInfo::set_reference_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reference_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tvix.store.v1.NARInfo.reference_names)
}
inline void NARInfo::set_reference_names(int index, const char* value, size_t size) {
  _impl_.reference_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tvix.store.v1.NARInfo.reference_names)
}
inline std::string* NARInfo::_internal_add_reference_names() {
  return _impl_.reference_names_.Add();
}
inline void NARInfo::add_reference_names(const std::string& value) {
  _impl_.reference_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tvix.store.v1.NARInfo.reference_names)
}
inline void NARInfo::add_reference_names(std::string&& value) {
  _impl_.reference_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tvix.store.v1.NARInfo.reference_names)
}
inline void NARInfo::add_reference_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reference_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tvix.store.v1.NARInfo.reference_names)
}
inline void NARInfo::add_reference_names(const char* value, size_t size) {
  _impl_.reference_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tvix.store.v1.NARInfo.reference_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NARInfo::reference_names() const {
  // @@protoc_insertion_point(field_list:tvix.store.v1.NARInfo.reference_names)
  return _impl_.reference_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NARInfo::mutable_reference_names() {
  // @@protoc_insertion_point(field_mutable_list:tvix.store.v1.NARInfo.reference_names)
  return &_impl_.reference_names_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace store
}  // namespace tvix

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pathinfo_2eproto

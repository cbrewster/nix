// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pathinfo.proto

#include "pathinfo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tvix {
namespace store {
namespace v1 {
PROTOBUF_CONSTEXPR PathInfo::PathInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.references_)*/{}
  , /*decltype(_impl_.node_)*/nullptr
  , /*decltype(_impl_.narinfo_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathInfoDefaultTypeInternal() {}
  union {
    PathInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathInfoDefaultTypeInternal _PathInfo_default_instance_;
PROTOBUF_CONSTEXPR Node::Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeDefaultTypeInternal _Node_default_instance_;
PROTOBUF_CONSTEXPR NARInfo_Signature::NARInfo_Signature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NARInfo_SignatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NARInfo_SignatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NARInfo_SignatureDefaultTypeInternal() {}
  union {
    NARInfo_Signature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NARInfo_SignatureDefaultTypeInternal _NARInfo_Signature_default_instance_;
PROTOBUF_CONSTEXPR NARInfo::NARInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signatures_)*/{}
  , /*decltype(_impl_.reference_names_)*/{}
  , /*decltype(_impl_.nar_sha256_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nar_size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NARInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NARInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NARInfoDefaultTypeInternal() {}
  union {
    NARInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NARInfoDefaultTypeInternal _NARInfo_default_instance_;
}  // namespace v1
}  // namespace store
}  // namespace tvix
static ::_pb::Metadata file_level_metadata_pathinfo_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_pathinfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pathinfo_2eproto = nullptr;

const uint32_t TableStruct_pathinfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::PathInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::PathInfo, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::PathInfo, _impl_.references_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::PathInfo, _impl_.narinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::Node, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::Node, _impl_.node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::NARInfo_Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::NARInfo_Signature, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::NARInfo_Signature, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::NARInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::NARInfo, _impl_.nar_size_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::NARInfo, _impl_.nar_sha256_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::NARInfo, _impl_.signatures_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::NARInfo, _impl_.reference_names_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tvix::store::v1::PathInfo)},
  { 9, -1, -1, sizeof(::tvix::store::v1::Node)},
  { 19, -1, -1, sizeof(::tvix::store::v1::NARInfo_Signature)},
  { 27, -1, -1, sizeof(::tvix::store::v1::NARInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tvix::store::v1::_PathInfo_default_instance_._instance,
  &::tvix::store::v1::_Node_default_instance_._instance,
  &::tvix::store::v1::_NARInfo_Signature_default_instance_._instance,
  &::tvix::store::v1::_NARInfo_default_instance_._instance,
};

const char descriptor_table_protodef_pathinfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016pathinfo.proto\022\rtvix.store.v1\032\rcastore"
  ".proto\"j\n\010PathInfo\022!\n\004node\030\001 \001(\0132\023.tvix."
  "store.v1.Node\022\022\n\nreferences\030\002 \003(\014\022\'\n\007nar"
  "info\030\003 \001(\0132\026.tvix.store.v1.NARInfo\"\231\001\n\004N"
  "ode\0221\n\tdirectory\030\001 \001(\0132\034.tvix.store.v1.D"
  "irectoryNodeH\000\022\'\n\004file\030\002 \001(\0132\027.tvix.stor"
  "e.v1.FileNodeH\000\022-\n\007symlink\030\003 \001(\0132\032.tvix."
  "store.v1.SymlinkNodeH\000B\006\n\004node\"\247\001\n\007NARIn"
  "fo\022\020\n\010nar_size\030\001 \001(\004\022\022\n\nnar_sha256\030\002 \001(\014"
  "\0224\n\nsignatures\030\003 \003(\0132 .tvix.store.v1.NAR"
  "Info.Signature\022\027\n\017reference_names\030\004 \003(\t\032"
  "\'\n\tSignature\022\014\n\004name\030\001 \001(\t\022\014\n\004data\030\002 \001(\014"
  "B(Z&code.tvl.fyi/tvix/store/protos;store"
  "v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_pathinfo_2eproto_deps[1] = {
  &::descriptor_table_castore_2eproto,
};
static ::_pbi::once_flag descriptor_table_pathinfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pathinfo_2eproto = {
    false, false, 530, descriptor_table_protodef_pathinfo_2eproto,
    "pathinfo.proto",
    &descriptor_table_pathinfo_2eproto_once, descriptor_table_pathinfo_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_pathinfo_2eproto::offsets,
    file_level_metadata_pathinfo_2eproto, file_level_enum_descriptors_pathinfo_2eproto,
    file_level_service_descriptors_pathinfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pathinfo_2eproto_getter() {
  return &descriptor_table_pathinfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pathinfo_2eproto(&descriptor_table_pathinfo_2eproto);
namespace tvix {
namespace store {
namespace v1 {

// ===================================================================

class PathInfo::_Internal {
 public:
  static const ::tvix::store::v1::Node& node(const PathInfo* msg);
  static const ::tvix::store::v1::NARInfo& narinfo(const PathInfo* msg);
};

const ::tvix::store::v1::Node&
PathInfo::_Internal::node(const PathInfo* msg) {
  return *msg->_impl_.node_;
}
const ::tvix::store::v1::NARInfo&
PathInfo::_Internal::narinfo(const PathInfo* msg) {
  return *msg->_impl_.narinfo_;
}
PathInfo::PathInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tvix.store.v1.PathInfo)
}
PathInfo::PathInfo(const PathInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PathInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.references_){from._impl_.references_}
    , decltype(_impl_.node_){nullptr}
    , decltype(_impl_.narinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_node()) {
    _this->_impl_.node_ = new ::tvix::store::v1::Node(*from._impl_.node_);
  }
  if (from._internal_has_narinfo()) {
    _this->_impl_.narinfo_ = new ::tvix::store::v1::NARInfo(*from._impl_.narinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:tvix.store.v1.PathInfo)
}

inline void PathInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.references_){arena}
    , decltype(_impl_.node_){nullptr}
    , decltype(_impl_.narinfo_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PathInfo::~PathInfo() {
  // @@protoc_insertion_point(destructor:tvix.store.v1.PathInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.references_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.node_;
  if (this != internal_default_instance()) delete _impl_.narinfo_;
}

void PathInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tvix.store.v1.PathInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.references_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.node_ != nullptr) {
    delete _impl_.node_;
  }
  _impl_.node_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.narinfo_ != nullptr) {
    delete _impl_.narinfo_;
  }
  _impl_.narinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tvix.store.v1.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes references = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_references();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tvix.store.v1.NARInfo narinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_narinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PathInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tvix.store.v1.PathInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tvix.store.v1.Node node = 1;
  if (this->_internal_has_node()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::node(this),
        _Internal::node(this).GetCachedSize(), target, stream);
  }

  // repeated bytes references = 2;
  for (int i = 0, n = this->_internal_references_size(); i < n; i++) {
    const auto& s = this->_internal_references(i);
    target = stream->WriteBytes(2, s, target);
  }

  // .tvix.store.v1.NARInfo narinfo = 3;
  if (this->_internal_has_narinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::narinfo(this),
        _Internal::narinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tvix.store.v1.PathInfo)
  return target;
}

size_t PathInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tvix.store.v1.PathInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes references = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.references_.size());
  for (int i = 0, n = _impl_.references_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.references_.Get(i));
  }

  // .tvix.store.v1.Node node = 1;
  if (this->_internal_has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.node_);
  }

  // .tvix.store.v1.NARInfo narinfo = 3;
  if (this->_internal_has_narinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.narinfo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PathInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PathInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PathInfo::GetClassData() const { return &_class_data_; }


void PathInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PathInfo*>(&to_msg);
  auto& from = static_cast<const PathInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tvix.store.v1.PathInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.references_.MergeFrom(from._impl_.references_);
  if (from._internal_has_node()) {
    _this->_internal_mutable_node()->::tvix::store::v1::Node::MergeFrom(
        from._internal_node());
  }
  if (from._internal_has_narinfo()) {
    _this->_internal_mutable_narinfo()->::tvix::store::v1::NARInfo::MergeFrom(
        from._internal_narinfo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PathInfo::CopyFrom(const PathInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tvix.store.v1.PathInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathInfo::IsInitialized() const {
  return true;
}

void PathInfo::InternalSwap(PathInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.references_.InternalSwap(&other->_impl_.references_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathInfo, _impl_.narinfo_)
      + sizeof(PathInfo::_impl_.narinfo_)
      - PROTOBUF_FIELD_OFFSET(PathInfo, _impl_.node_)>(
          reinterpret_cast<char*>(&_impl_.node_),
          reinterpret_cast<char*>(&other->_impl_.node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PathInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pathinfo_2eproto_getter, &descriptor_table_pathinfo_2eproto_once,
      file_level_metadata_pathinfo_2eproto[0]);
}

// ===================================================================

class Node::_Internal {
 public:
  static const ::tvix::store::v1::DirectoryNode& directory(const Node* msg);
  static const ::tvix::store::v1::FileNode& file(const Node* msg);
  static const ::tvix::store::v1::SymlinkNode& symlink(const Node* msg);
};

const ::tvix::store::v1::DirectoryNode&
Node::_Internal::directory(const Node* msg) {
  return *msg->_impl_.node_.directory_;
}
const ::tvix::store::v1::FileNode&
Node::_Internal::file(const Node* msg) {
  return *msg->_impl_.node_.file_;
}
const ::tvix::store::v1::SymlinkNode&
Node::_Internal::symlink(const Node* msg) {
  return *msg->_impl_.node_.symlink_;
}
void Node::set_allocated_directory(::tvix::store::v1::DirectoryNode* directory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (directory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(directory));
    if (message_arena != submessage_arena) {
      directory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, directory, submessage_arena);
    }
    set_has_directory();
    _impl_.node_.directory_ = directory;
  }
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.Node.directory)
}
void Node::clear_directory() {
  if (_internal_has_directory()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.node_.directory_;
    }
    clear_has_node();
  }
}
void Node::set_allocated_file(::tvix::store::v1::FileNode* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file));
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    _impl_.node_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.Node.file)
}
void Node::clear_file() {
  if (_internal_has_file()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.node_.file_;
    }
    clear_has_node();
  }
}
void Node::set_allocated_symlink(::tvix::store::v1::SymlinkNode* symlink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_node();
  if (symlink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(symlink));
    if (message_arena != submessage_arena) {
      symlink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symlink, submessage_arena);
    }
    set_has_symlink();
    _impl_.node_.symlink_ = symlink;
  }
  // @@protoc_insertion_point(field_set_allocated:tvix.store.v1.Node.symlink)
}
void Node::clear_symlink() {
  if (_internal_has_symlink()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.node_.symlink_;
    }
    clear_has_node();
  }
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tvix.store.v1.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_node();
  switch (from.node_case()) {
    case kDirectory: {
      _this->_internal_mutable_directory()->::tvix::store::v1::DirectoryNode::MergeFrom(
          from._internal_directory());
      break;
    }
    case kFile: {
      _this->_internal_mutable_file()->::tvix::store::v1::FileNode::MergeFrom(
          from._internal_file());
      break;
    }
    case kSymlink: {
      _this->_internal_mutable_symlink()->::tvix::store::v1::SymlinkNode::MergeFrom(
          from._internal_symlink());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tvix.store.v1.Node)
}

inline void Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_node();
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:tvix.store.v1.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_node()) {
    clear_node();
  }
}

void Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Node::clear_node() {
// @@protoc_insertion_point(one_of_clear_start:tvix.store.v1.Node)
  switch (node_case()) {
    case kDirectory: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.directory_;
      }
      break;
    }
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.file_;
      }
      break;
    }
    case kSymlink: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.node_.symlink_;
      }
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NODE_NOT_SET;
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:tvix.store.v1.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_node();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tvix.store.v1.DirectoryNode directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_directory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tvix.store.v1.FileNode file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tvix.store.v1.SymlinkNode symlink = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_symlink(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tvix.store.v1.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tvix.store.v1.DirectoryNode directory = 1;
  if (_internal_has_directory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::directory(this),
        _Internal::directory(this).GetCachedSize(), target, stream);
  }

  // .tvix.store.v1.FileNode file = 2;
  if (_internal_has_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  // .tvix.store.v1.SymlinkNode symlink = 3;
  if (_internal_has_symlink()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::symlink(this),
        _Internal::symlink(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tvix.store.v1.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tvix.store.v1.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (node_case()) {
    // .tvix.store.v1.DirectoryNode directory = 1;
    case kDirectory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.node_.directory_);
      break;
    }
    // .tvix.store.v1.FileNode file = 2;
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.node_.file_);
      break;
    }
    // .tvix.store.v1.SymlinkNode symlink = 3;
    case kSymlink: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.node_.symlink_);
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }


void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Node*>(&to_msg);
  auto& from = static_cast<const Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tvix.store.v1.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.node_case()) {
    case kDirectory: {
      _this->_internal_mutable_directory()->::tvix::store::v1::DirectoryNode::MergeFrom(
          from._internal_directory());
      break;
    }
    case kFile: {
      _this->_internal_mutable_file()->::tvix::store::v1::FileNode::MergeFrom(
          from._internal_file());
      break;
    }
    case kSymlink: {
      _this->_internal_mutable_symlink()->::tvix::store::v1::SymlinkNode::MergeFrom(
          from._internal_symlink());
      break;
    }
    case NODE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tvix.store.v1.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.node_, other->_impl_.node_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pathinfo_2eproto_getter, &descriptor_table_pathinfo_2eproto_once,
      file_level_metadata_pathinfo_2eproto[1]);
}

// ===================================================================

class NARInfo_Signature::_Internal {
 public:
};

NARInfo_Signature::NARInfo_Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tvix.store.v1.NARInfo.Signature)
}
NARInfo_Signature::NARInfo_Signature(const NARInfo_Signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NARInfo_Signature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tvix.store.v1.NARInfo.Signature)
}

inline void NARInfo_Signature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NARInfo_Signature::~NARInfo_Signature() {
  // @@protoc_insertion_point(destructor:tvix.store.v1.NARInfo.Signature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NARInfo_Signature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.data_.Destroy();
}

void NARInfo_Signature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NARInfo_Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:tvix.store.v1.NARInfo.Signature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NARInfo_Signature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tvix.store.v1.NARInfo.Signature.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NARInfo_Signature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tvix.store.v1.NARInfo.Signature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tvix.store.v1.NARInfo.Signature.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tvix.store.v1.NARInfo.Signature)
  return target;
}

size_t NARInfo_Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tvix.store.v1.NARInfo.Signature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NARInfo_Signature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NARInfo_Signature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NARInfo_Signature::GetClassData() const { return &_class_data_; }


void NARInfo_Signature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NARInfo_Signature*>(&to_msg);
  auto& from = static_cast<const NARInfo_Signature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tvix.store.v1.NARInfo.Signature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NARInfo_Signature::CopyFrom(const NARInfo_Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tvix.store.v1.NARInfo.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NARInfo_Signature::IsInitialized() const {
  return true;
}

void NARInfo_Signature::InternalSwap(NARInfo_Signature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NARInfo_Signature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pathinfo_2eproto_getter, &descriptor_table_pathinfo_2eproto_once,
      file_level_metadata_pathinfo_2eproto[2]);
}

// ===================================================================

class NARInfo::_Internal {
 public:
};

NARInfo::NARInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tvix.store.v1.NARInfo)
}
NARInfo::NARInfo(const NARInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NARInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signatures_){from._impl_.signatures_}
    , decltype(_impl_.reference_names_){from._impl_.reference_names_}
    , decltype(_impl_.nar_sha256_){}
    , decltype(_impl_.nar_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nar_sha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nar_sha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nar_sha256().empty()) {
    _this->_impl_.nar_sha256_.Set(from._internal_nar_sha256(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.nar_size_ = from._impl_.nar_size_;
  // @@protoc_insertion_point(copy_constructor:tvix.store.v1.NARInfo)
}

inline void NARInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signatures_){arena}
    , decltype(_impl_.reference_names_){arena}
    , decltype(_impl_.nar_sha256_){}
    , decltype(_impl_.nar_size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nar_sha256_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nar_sha256_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NARInfo::~NARInfo() {
  // @@protoc_insertion_point(destructor:tvix.store.v1.NARInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NARInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signatures_.~RepeatedPtrField();
  _impl_.reference_names_.~RepeatedPtrField();
  _impl_.nar_sha256_.Destroy();
}

void NARInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NARInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tvix.store.v1.NARInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signatures_.Clear();
  _impl_.reference_names_.Clear();
  _impl_.nar_sha256_.ClearToEmpty();
  _impl_.nar_size_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NARInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 nar_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.nar_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes nar_sha256 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nar_sha256();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tvix.store.v1.NARInfo.Signature signatures = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string reference_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reference_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tvix.store.v1.NARInfo.reference_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NARInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tvix.store.v1.NARInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nar_size = 1;
  if (this->_internal_nar_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nar_size(), target);
  }

  // bytes nar_sha256 = 2;
  if (!this->_internal_nar_sha256().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nar_sha256(), target);
  }

  // repeated .tvix.store.v1.NARInfo.Signature signatures = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signatures_size()); i < n; i++) {
    const auto& repfield = this->_internal_signatures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string reference_names = 4;
  for (int i = 0, n = this->_internal_reference_names_size(); i < n; i++) {
    const auto& s = this->_internal_reference_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tvix.store.v1.NARInfo.reference_names");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tvix.store.v1.NARInfo)
  return target;
}

size_t NARInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tvix.store.v1.NARInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tvix.store.v1.NARInfo.Signature signatures = 3;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->_impl_.signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string reference_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.reference_names_.size());
  for (int i = 0, n = _impl_.reference_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.reference_names_.Get(i));
  }

  // bytes nar_sha256 = 2;
  if (!this->_internal_nar_sha256().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nar_sha256());
  }

  // uint64 nar_size = 1;
  if (this->_internal_nar_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_nar_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NARInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NARInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NARInfo::GetClassData() const { return &_class_data_; }


void NARInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NARInfo*>(&to_msg);
  auto& from = static_cast<const NARInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tvix.store.v1.NARInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signatures_.MergeFrom(from._impl_.signatures_);
  _this->_impl_.reference_names_.MergeFrom(from._impl_.reference_names_);
  if (!from._internal_nar_sha256().empty()) {
    _this->_internal_set_nar_sha256(from._internal_nar_sha256());
  }
  if (from._internal_nar_size() != 0) {
    _this->_internal_set_nar_size(from._internal_nar_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NARInfo::CopyFrom(const NARInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tvix.store.v1.NARInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NARInfo::IsInitialized() const {
  return true;
}

void NARInfo::InternalSwap(NARInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signatures_.InternalSwap(&other->_impl_.signatures_);
  _impl_.reference_names_.InternalSwap(&other->_impl_.reference_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nar_sha256_, lhs_arena,
      &other->_impl_.nar_sha256_, rhs_arena
  );
  swap(_impl_.nar_size_, other->_impl_.nar_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NARInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pathinfo_2eproto_getter, &descriptor_table_pathinfo_2eproto_once,
      file_level_metadata_pathinfo_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace store
}  // namespace tvix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tvix::store::v1::PathInfo*
Arena::CreateMaybeMessage< ::tvix::store::v1::PathInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tvix::store::v1::PathInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tvix::store::v1::Node*
Arena::CreateMaybeMessage< ::tvix::store::v1::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tvix::store::v1::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::tvix::store::v1::NARInfo_Signature*
Arena::CreateMaybeMessage< ::tvix::store::v1::NARInfo_Signature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tvix::store::v1::NARInfo_Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::tvix::store::v1::NARInfo*
Arena::CreateMaybeMessage< ::tvix::store::v1::NARInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tvix::store::v1::NARInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

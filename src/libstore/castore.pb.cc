// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: castore.proto

#include "castore.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tvix {
namespace store {
namespace v1 {
PROTOBUF_CONSTEXPR Directory::Directory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.directories_)*/{}
  , /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.symlinks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectoryDefaultTypeInternal() {}
  union {
    Directory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectoryDefaultTypeInternal _Directory_default_instance_;
PROTOBUF_CONSTEXPR DirectoryNode::DirectoryNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirectoryNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectoryNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectoryNodeDefaultTypeInternal() {}
  union {
    DirectoryNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectoryNodeDefaultTypeInternal _DirectoryNode_default_instance_;
PROTOBUF_CONSTEXPR FileNode::FileNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.digest_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/0u
  , /*decltype(_impl_.executable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileNodeDefaultTypeInternal() {}
  union {
    FileNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileNodeDefaultTypeInternal _FileNode_default_instance_;
PROTOBUF_CONSTEXPR SymlinkNode::SymlinkNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SymlinkNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymlinkNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymlinkNodeDefaultTypeInternal() {}
  union {
    SymlinkNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymlinkNodeDefaultTypeInternal _SymlinkNode_default_instance_;
}  // namespace v1
}  // namespace store
}  // namespace tvix
static ::_pb::Metadata file_level_metadata_castore_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_castore_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_castore_2eproto = nullptr;

const uint32_t TableStruct_castore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::Directory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::Directory, _impl_.directories_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::Directory, _impl_.files_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::Directory, _impl_.symlinks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::DirectoryNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::DirectoryNode, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::DirectoryNode, _impl_.digest_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::DirectoryNode, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::FileNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::FileNode, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::FileNode, _impl_.digest_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::FileNode, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::FileNode, _impl_.executable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::SymlinkNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::SymlinkNode, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tvix::store::v1::SymlinkNode, _impl_.target_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tvix::store::v1::Directory)},
  { 9, -1, -1, sizeof(::tvix::store::v1::DirectoryNode)},
  { 18, -1, -1, sizeof(::tvix::store::v1::FileNode)},
  { 28, -1, -1, sizeof(::tvix::store::v1::SymlinkNode)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tvix::store::v1::_Directory_default_instance_._instance,
  &::tvix::store::v1::_DirectoryNode_default_instance_._instance,
  &::tvix::store::v1::_FileNode_default_instance_._instance,
  &::tvix::store::v1::_SymlinkNode_default_instance_._instance,
};

const char descriptor_table_protodef_castore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcastore.proto\022\rtvix.store.v1\"\224\001\n\tDirec"
  "tory\0221\n\013directories\030\001 \003(\0132\034.tvix.store.v"
  "1.DirectoryNode\022&\n\005files\030\002 \003(\0132\027.tvix.st"
  "ore.v1.FileNode\022,\n\010symlinks\030\003 \003(\0132\032.tvix"
  ".store.v1.SymlinkNode\";\n\rDirectoryNode\022\014"
  "\n\004name\030\001 \001(\014\022\016\n\006digest\030\002 \001(\014\022\014\n\004size\030\003 \001"
  "(\r\"J\n\010FileNode\022\014\n\004name\030\001 \001(\014\022\016\n\006digest\030\002"
  " \001(\014\022\014\n\004size\030\003 \001(\r\022\022\n\nexecutable\030\004 \001(\010\"+"
  "\n\013SymlinkNode\022\014\n\004name\030\001 \001(\014\022\016\n\006target\030\002 "
  "\001(\014B(Z&code.tvl.fyi/tvix/store/protos;st"
  "orev1b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_castore_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_castore_2eproto = {
    false, false, 413, descriptor_table_protodef_castore_2eproto,
    "castore.proto",
    &descriptor_table_castore_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_castore_2eproto::offsets,
    file_level_metadata_castore_2eproto, file_level_enum_descriptors_castore_2eproto,
    file_level_service_descriptors_castore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_castore_2eproto_getter() {
  return &descriptor_table_castore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_castore_2eproto(&descriptor_table_castore_2eproto);
namespace tvix {
namespace store {
namespace v1 {

// ===================================================================

class Directory::_Internal {
 public:
};

Directory::Directory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tvix.store.v1.Directory)
}
Directory::Directory(const Directory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Directory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.directories_){from._impl_.directories_}
    , decltype(_impl_.files_){from._impl_.files_}
    , decltype(_impl_.symlinks_){from._impl_.symlinks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tvix.store.v1.Directory)
}

inline void Directory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.directories_){arena}
    , decltype(_impl_.files_){arena}
    , decltype(_impl_.symlinks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Directory::~Directory() {
  // @@protoc_insertion_point(destructor:tvix.store.v1.Directory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Directory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.directories_.~RepeatedPtrField();
  _impl_.files_.~RepeatedPtrField();
  _impl_.symlinks_.~RepeatedPtrField();
}

void Directory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Directory::Clear() {
// @@protoc_insertion_point(message_clear_start:tvix.store.v1.Directory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.directories_.Clear();
  _impl_.files_.Clear();
  _impl_.symlinks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Directory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tvix.store.v1.DirectoryNode directories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_directories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tvix.store.v1.FileNode files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tvix.store.v1.SymlinkNode symlinks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_symlinks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Directory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tvix.store.v1.Directory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tvix.store.v1.DirectoryNode directories = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_directories_size()); i < n; i++) {
    const auto& repfield = this->_internal_directories(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tvix.store.v1.FileNode files = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tvix.store.v1.SymlinkNode symlinks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_symlinks_size()); i < n; i++) {
    const auto& repfield = this->_internal_symlinks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tvix.store.v1.Directory)
  return target;
}

size_t Directory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tvix.store.v1.Directory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tvix.store.v1.DirectoryNode directories = 1;
  total_size += 1UL * this->_internal_directories_size();
  for (const auto& msg : this->_impl_.directories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tvix.store.v1.FileNode files = 2;
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->_impl_.files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tvix.store.v1.SymlinkNode symlinks = 3;
  total_size += 1UL * this->_internal_symlinks_size();
  for (const auto& msg : this->_impl_.symlinks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Directory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Directory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Directory::GetClassData() const { return &_class_data_; }


void Directory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Directory*>(&to_msg);
  auto& from = static_cast<const Directory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tvix.store.v1.Directory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.directories_.MergeFrom(from._impl_.directories_);
  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  _this->_impl_.symlinks_.MergeFrom(from._impl_.symlinks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Directory::CopyFrom(const Directory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tvix.store.v1.Directory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Directory::IsInitialized() const {
  return true;
}

void Directory::InternalSwap(Directory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.directories_.InternalSwap(&other->_impl_.directories_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  _impl_.symlinks_.InternalSwap(&other->_impl_.symlinks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Directory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_castore_2eproto_getter, &descriptor_table_castore_2eproto_once,
      file_level_metadata_castore_2eproto[0]);
}

// ===================================================================

class DirectoryNode::_Internal {
 public:
};

DirectoryNode::DirectoryNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tvix.store.v1.DirectoryNode)
}
DirectoryNode::DirectoryNode(const DirectoryNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DirectoryNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_digest().empty()) {
    _this->_impl_.digest_.Set(from._internal_digest(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:tvix.store.v1.DirectoryNode)
}

inline void DirectoryNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.size_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DirectoryNode::~DirectoryNode() {
  // @@protoc_insertion_point(destructor:tvix.store.v1.DirectoryNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirectoryNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.digest_.Destroy();
}

void DirectoryNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirectoryNode::Clear() {
// @@protoc_insertion_point(message_clear_start:tvix.store.v1.DirectoryNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.digest_.ClearToEmpty();
  _impl_.size_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectoryNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectoryNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tvix.store.v1.DirectoryNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes digest = 2;
  if (!this->_internal_digest().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_digest(), target);
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tvix.store.v1.DirectoryNode)
  return target;
}

size_t DirectoryNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tvix.store.v1.DirectoryNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes digest = 2;
  if (!this->_internal_digest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectoryNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DirectoryNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectoryNode::GetClassData() const { return &_class_data_; }


void DirectoryNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DirectoryNode*>(&to_msg);
  auto& from = static_cast<const DirectoryNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tvix.store.v1.DirectoryNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_digest().empty()) {
    _this->_internal_set_digest(from._internal_digest());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectoryNode::CopyFrom(const DirectoryNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tvix.store.v1.DirectoryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryNode::IsInitialized() const {
  return true;
}

void DirectoryNode::InternalSwap(DirectoryNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digest_, lhs_arena,
      &other->_impl_.digest_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectoryNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_castore_2eproto_getter, &descriptor_table_castore_2eproto_once,
      file_level_metadata_castore_2eproto[1]);
}

// ===================================================================

class FileNode::_Internal {
 public:
};

FileNode::FileNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tvix.store.v1.FileNode)
}
FileNode::FileNode(const FileNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.executable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_digest().empty()) {
    _this->_impl_.digest_.Set(from._internal_digest(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.executable_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.executable_));
  // @@protoc_insertion_point(copy_constructor:tvix.store.v1.FileNode)
}

inline void FileNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.digest_){}
    , decltype(_impl_.size_){0u}
    , decltype(_impl_.executable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.digest_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.digest_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileNode::~FileNode() {
  // @@protoc_insertion_point(destructor:tvix.store.v1.FileNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.digest_.Destroy();
}

void FileNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileNode::Clear() {
// @@protoc_insertion_point(message_clear_start:tvix.store.v1.FileNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.digest_.ClearToEmpty();
  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.executable_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.executable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes digest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_digest();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool executable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.executable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tvix.store.v1.FileNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes digest = 2;
  if (!this->_internal_digest().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_digest(), target);
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size(), target);
  }

  // bool executable = 4;
  if (this->_internal_executable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_executable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tvix.store.v1.FileNode)
  return target;
}

size_t FileNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tvix.store.v1.FileNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes digest = 2;
  if (!this->_internal_digest().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_digest());
  }

  // uint32 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_size());
  }

  // bool executable = 4;
  if (this->_internal_executable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileNode::GetClassData() const { return &_class_data_; }


void FileNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileNode*>(&to_msg);
  auto& from = static_cast<const FileNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tvix.store.v1.FileNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_digest().empty()) {
    _this->_internal_set_digest(from._internal_digest());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_executable() != 0) {
    _this->_internal_set_executable(from._internal_executable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileNode::CopyFrom(const FileNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tvix.store.v1.FileNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileNode::IsInitialized() const {
  return true;
}

void FileNode::InternalSwap(FileNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.digest_, lhs_arena,
      &other->_impl_.digest_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FileNode, _impl_.executable_)
      + sizeof(FileNode::_impl_.executable_)
      - PROTOBUF_FIELD_OFFSET(FileNode, _impl_.size_)>(
          reinterpret_cast<char*>(&_impl_.size_),
          reinterpret_cast<char*>(&other->_impl_.size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FileNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_castore_2eproto_getter, &descriptor_table_castore_2eproto_once,
      file_level_metadata_castore_2eproto[2]);
}

// ===================================================================

class SymlinkNode::_Internal {
 public:
};

SymlinkNode::SymlinkNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tvix.store.v1.SymlinkNode)
}
SymlinkNode::SymlinkNode(const SymlinkNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SymlinkNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    _this->_impl_.target_.Set(from._internal_target(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tvix.store.v1.SymlinkNode)
}

inline void SymlinkNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SymlinkNode::~SymlinkNode() {
  // @@protoc_insertion_point(destructor:tvix.store.v1.SymlinkNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SymlinkNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.target_.Destroy();
}

void SymlinkNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SymlinkNode::Clear() {
// @@protoc_insertion_point(message_clear_start:tvix.store.v1.SymlinkNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.target_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SymlinkNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SymlinkNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tvix.store.v1.SymlinkNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes target = 2;
  if (!this->_internal_target().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tvix.store.v1.SymlinkNode)
  return target;
}

size_t SymlinkNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tvix.store.v1.SymlinkNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes target = 2;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SymlinkNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SymlinkNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SymlinkNode::GetClassData() const { return &_class_data_; }


void SymlinkNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SymlinkNode*>(&to_msg);
  auto& from = static_cast<const SymlinkNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tvix.store.v1.SymlinkNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SymlinkNode::CopyFrom(const SymlinkNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tvix.store.v1.SymlinkNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymlinkNode::IsInitialized() const {
  return true;
}

void SymlinkNode::InternalSwap(SymlinkNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_, lhs_arena,
      &other->_impl_.target_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SymlinkNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_castore_2eproto_getter, &descriptor_table_castore_2eproto_once,
      file_level_metadata_castore_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace store
}  // namespace tvix
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tvix::store::v1::Directory*
Arena::CreateMaybeMessage< ::tvix::store::v1::Directory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tvix::store::v1::Directory >(arena);
}
template<> PROTOBUF_NOINLINE ::tvix::store::v1::DirectoryNode*
Arena::CreateMaybeMessage< ::tvix::store::v1::DirectoryNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tvix::store::v1::DirectoryNode >(arena);
}
template<> PROTOBUF_NOINLINE ::tvix::store::v1::FileNode*
Arena::CreateMaybeMessage< ::tvix::store::v1::FileNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tvix::store::v1::FileNode >(arena);
}
template<> PROTOBUF_NOINLINE ::tvix::store::v1::SymlinkNode*
Arena::CreateMaybeMessage< ::tvix::store::v1::SymlinkNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tvix::store::v1::SymlinkNode >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
